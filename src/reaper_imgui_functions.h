// Generated for ReaImGui v0.9.3

#ifndef REAPER_IMGUI_FUNCTIONS_H
#define REAPER_IMGUI_FUNCTIONS_H

#include <stdexcept>
#include <type_traits>
#include <utility>

class ImGui_Context;
class ImGui_DrawList;
class ImGui_DrawListSplitter;
class ImGui_Font;
class ImGui_Function;
class ImGui_Image;
class ImGui_ImageSet;
class ImGui_ListClipper;
class ImGui_Resource;
class ImGui_TextFilter;
class ImGui_Viewport;

struct ImGui_Error : std::runtime_error {
  using runtime_error::runtime_error;
};

class LICE_IBitmap;
struct reaper_array;

#ifdef REAIMGUIAPI_IMPLEMENT
#  define REAIMGUIAPI_EXTERN
#else
#  define REAIMGUIAPI_EXTERN extern
#endif

namespace ImGui {
  constexpr const char *version = "0.9.3";
  void init(void *(*plugin_getapi)(const char *));

  namespace details {
    REAIMGUIAPI_EXTERN const char *(*last_error)() noexcept;

    inline void check_error()
    {
      if(const char *err { last_error() })
        throw ImGui_Error { err };
    }

    struct nullopt_t {
      constexpr explicit nullopt_t(int) {}
    };
    constexpr nullopt_t nullopt { 0 };

    template<typename T, typename E = void>
    class optional {
    public:
      using value_type = T*;
      optional(nullopt_t) : m_present { false } {}
      optional(const T v) : m_value { v }, m_present { true } {}
      optional(value_type) = delete;
      operator value_type() { return m_present ? &m_value : nullptr; }

    private:
      T m_value;
      bool m_present;
    };

    template<typename T>
    class optional<T, typename std::enable_if_t<std::is_pointer_v<T>>> {
    public:
      using value_type = T;
      optional(nullopt_t) : optional { nullptr } {}
      optional(T ptr) : m_value { ptr } {}
      operator value_type() { return m_value; }

    private:
      T m_value;
    };

    template<typename T> struct param { using value_type = T; };
    template<typename T> struct param<optional<T>> {
      using value_type = typename optional<T>::value_type;
    };

    template<typename T, bool nodiscard = false>
    class function;

    template<typename R, typename... Args, bool nodiscard>
    class function<R(Args...), nodiscard> {
    public:
      using Proc = R(*)(typename param<Args>::value_type...) noexcept;
      function() : m_proc { nullptr } {}
      function(Proc proc) : m_proc { proc } {}
      operator bool() const { return m_proc != nullptr; }

      template<typename... CallArgs, bool ND = nodiscard>
      std::enable_if_t<!ND, R> operator()(CallArgs&&... args) const
      {
        if constexpr(sizeof...(CallArgs) < sizeof...(Args))
          return (*this)(std::forward<CallArgs>(args)..., nullopt);
        else
          return invoke(std::forward<CallArgs>(args)...);
      }

      template<typename... CallArgs, bool ND = nodiscard> [[nodiscard]]
      std::enable_if_t<ND, R> operator()(CallArgs&&... args) const
      {
        if constexpr(sizeof...(CallArgs) < sizeof...(Args))
          return (*this)(std::forward<CallArgs>(args)..., nullopt);
        else
          return invoke(std::forward<CallArgs>(args)...);
      }

    protected:
      friend void ImGui::init(void *(*)(const char *));
      function(void *proc) : m_proc { reinterpret_cast<Proc>(proc) } {}

    private:
      R invoke(Args... args) const
      {
        if constexpr(std::is_void_v<R>) {
          m_proc(std::forward<Args>(args)...);
          check_error();
        }
        else {
          const R rv { m_proc(std::forward<Args>(args)...) };
          check_error();
          return rv;
        }
      }

      Proc m_proc;
    };

    inline int get_enum(const function<int()> f)
    {
      return f ? f() : 0;
    }
  }

  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, int dir)> ArrowButton;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<double> size_wInOptional, details::optional<double> size_hInOptional)> Button;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, bool* vInOut)> Checkbox;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* flagsInOut, int flags_value)> CheckboxFlags;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, details::optional<int> flagsInOptional)> InvisibleButton;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> PopButtonRepeat;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, bool repeat)> PushButtonRepeat;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, bool active)> RadioButton;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* vInOut, int v_button)> RadioButtonEx;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label)> SmallButton;
  REAIMGUIAPI_EXTERN int Dir_Down;
  REAIMGUIAPI_EXTERN int Dir_Left;
  REAIMGUIAPI_EXTERN int Dir_None;
  REAIMGUIAPI_EXTERN int Dir_Right;
  REAIMGUIAPI_EXTERN int Dir_Up;
  REAIMGUIAPI_EXTERN int ButtonFlags_MouseButtonLeft;
  REAIMGUIAPI_EXTERN int ButtonFlags_MouseButtonMiddle;
  REAIMGUIAPI_EXTERN int ButtonFlags_MouseButtonRight;
  REAIMGUIAPI_EXTERN int ButtonFlags_None;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* desc_id, int col_rgba, details::optional<int> flagsInOptional, details::optional<double> size_wInOptional, details::optional<double> size_hInOptional)> ColorButton;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* col_rgbInOut, details::optional<int> flagsInOptional)> ColorEdit3;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, details::optional<int> flagsInOptional)> ColorEdit4;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* col_rgbInOut, details::optional<int> flagsInOptional)> ColorPicker3;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, details::optional<int> flagsInOptional, details::optional<int> ref_colInOptional)> ColorPicker4;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int flags)> SetColorEditOptions;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoAlpha;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoBorder;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoDragDrop;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoInputs;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoLabel;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoOptions;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoPicker;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoSidePreview;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoSmallPreview;
  REAIMGUIAPI_EXTERN int ColorEditFlags_NoTooltip;
  REAIMGUIAPI_EXTERN int ColorEditFlags_None;
  REAIMGUIAPI_EXTERN int ColorEditFlags_AlphaBar;
  REAIMGUIAPI_EXTERN int ColorEditFlags_AlphaPreview;
  REAIMGUIAPI_EXTERN int ColorEditFlags_AlphaPreviewHalf;
  REAIMGUIAPI_EXTERN int ColorEditFlags_DisplayHSV;
  REAIMGUIAPI_EXTERN int ColorEditFlags_DisplayHex;
  REAIMGUIAPI_EXTERN int ColorEditFlags_DisplayRGB;
  REAIMGUIAPI_EXTERN int ColorEditFlags_Float;
  REAIMGUIAPI_EXTERN int ColorEditFlags_InputHSV;
  REAIMGUIAPI_EXTERN int ColorEditFlags_InputRGB;
  REAIMGUIAPI_EXTERN int ColorEditFlags_PickerHueBar;
  REAIMGUIAPI_EXTERN int ColorEditFlags_PickerHueWheel;
  REAIMGUIAPI_EXTERN int ColorEditFlags_Uint8;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, const char* preview_value, details::optional<int> flagsInOptional), true> BeginCombo;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, details::optional<int> popup_max_height_in_itemsInOptional)> Combo;
  REAIMGUIAPI_EXTERN int ComboFlags_HeightLarge;
  REAIMGUIAPI_EXTERN int ComboFlags_HeightLargest;
  REAIMGUIAPI_EXTERN int ComboFlags_HeightRegular;
  REAIMGUIAPI_EXTERN int ComboFlags_HeightSmall;
  REAIMGUIAPI_EXTERN int ComboFlags_NoArrowButton;
  REAIMGUIAPI_EXTERN int ComboFlags_NoPreview;
  REAIMGUIAPI_EXTERN int ComboFlags_None;
  REAIMGUIAPI_EXTERN int ComboFlags_PopupAlignLeft;
  REAIMGUIAPI_EXTERN int ComboFlags_WidthFitPreview;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndCombo;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<double> size_wInOptional, details::optional<double> size_hInOptional), true> BeginListBox;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndListBox;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, details::optional<int> height_in_itemsInOptional)> ListBox;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<bool*> p_selectedInOutOptional, details::optional<int> flagsInOptional, details::optional<double> size_wInOptional, details::optional<double> size_hInOptional)> Selectable;
  REAIMGUIAPI_EXTERN int SelectableFlags_AllowDoubleClick;
  REAIMGUIAPI_EXTERN int SelectableFlags_AllowOverlap;
  REAIMGUIAPI_EXTERN int SelectableFlags_Disabled;
  REAIMGUIAPI_EXTERN int SelectableFlags_DontClosePopups;
  REAIMGUIAPI_EXTERN int SelectableFlags_None;
  REAIMGUIAPI_EXTERN int SelectableFlags_SpanAllColumns;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, ImGui_Resource* obj)> Attach;
  REAIMGUIAPI_EXTERN details::function<ImGui_Context*(const char* label, details::optional<int> config_flagsInOptional), true> CreateContext;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, ImGui_Resource* obj)> Detach;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetDeltaTime;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx)> GetFrameCount;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetFramerate;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetTime;
  REAIMGUIAPI_EXTERN int ConfigFlags_DockingEnable;
  REAIMGUIAPI_EXTERN int ConfigFlags_NavEnableKeyboard;
  REAIMGUIAPI_EXTERN int ConfigFlags_NavEnableSetMousePos;
  REAIMGUIAPI_EXTERN int ConfigFlags_NavNoCaptureKeyboard;
  REAIMGUIAPI_EXTERN int ConfigFlags_NoKeyboard;
  REAIMGUIAPI_EXTERN int ConfigFlags_NoMouse;
  REAIMGUIAPI_EXTERN int ConfigFlags_NoMouseCursorChange;
  REAIMGUIAPI_EXTERN int ConfigFlags_NoSavedSettings;
  REAIMGUIAPI_EXTERN int ConfigFlags_None;
  REAIMGUIAPI_EXTERN int ConfigVar_DebugBeginReturnValueLoop;
  REAIMGUIAPI_EXTERN int ConfigVar_DebugBeginReturnValueOnce;
  REAIMGUIAPI_EXTERN int ConfigVar_DockingNoSplit;
  REAIMGUIAPI_EXTERN int ConfigVar_DockingTransparentPayload;
  REAIMGUIAPI_EXTERN int ConfigVar_DockingWithShift;
  REAIMGUIAPI_EXTERN int ConfigVar_DragClickToInputText;
  REAIMGUIAPI_EXTERN int ConfigVar_Flags;
  REAIMGUIAPI_EXTERN int ConfigVar_HoverDelayNormal;
  REAIMGUIAPI_EXTERN int ConfigVar_HoverDelayShort;
  REAIMGUIAPI_EXTERN int ConfigVar_HoverFlagsForTooltipMouse;
  REAIMGUIAPI_EXTERN int ConfigVar_HoverFlagsForTooltipNav;
  REAIMGUIAPI_EXTERN int ConfigVar_HoverStationaryDelay;
  REAIMGUIAPI_EXTERN int ConfigVar_InputTextCursorBlink;
  REAIMGUIAPI_EXTERN int ConfigVar_InputTextEnterKeepActive;
  REAIMGUIAPI_EXTERN int ConfigVar_InputTrickleEventQueue;
  REAIMGUIAPI_EXTERN int ConfigVar_KeyRepeatDelay;
  REAIMGUIAPI_EXTERN int ConfigVar_KeyRepeatRate;
  REAIMGUIAPI_EXTERN int ConfigVar_MacOSXBehaviors;
  REAIMGUIAPI_EXTERN int ConfigVar_MouseDoubleClickMaxDist;
  REAIMGUIAPI_EXTERN int ConfigVar_MouseDoubleClickTime;
  REAIMGUIAPI_EXTERN int ConfigVar_MouseDragThreshold;
  REAIMGUIAPI_EXTERN int ConfigVar_ViewportsNoDecoration;
  REAIMGUIAPI_EXTERN int ConfigVar_WindowsMoveFromTitleBarOnly;
  REAIMGUIAPI_EXTERN int ConfigVar_WindowsResizeFromEdges;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx, int var_idx)> GetConfigVar;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int var_idx, double value)> SetConfigVar;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* type, char* payloadOutNeedBig, int payloadOutNeedBig_sz, details::optional<int> flagsInOptional)> AcceptDragDropPayload;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int* countOut, details::optional<int> flagsInOptional)> AcceptDragDropPayloadFiles;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int* rgbOut, details::optional<int> flagsInOptional)> AcceptDragDropPayloadRGB;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int* rgbaOut, details::optional<int> flagsInOptional)> AcceptDragDropPayloadRGBA;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, details::optional<int> flagsInOptional), true> BeginDragDropSource;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx), true> BeginDragDropTarget;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndDragDropSource;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndDragDropTarget;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, char* typeOut, int typeOut_sz, char* payloadOutNeedBig, int payloadOutNeedBig_sz, bool* is_previewOut, bool* is_deliveryOut)> GetDragDropPayload;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int index, char* filenameOut, int filenameOut_sz)> GetDragDropPayloadFile;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* type, const char* data, details::optional<int> condInOptional)> SetDragDropPayload;
  REAIMGUIAPI_EXTERN int DragDropFlags_None;
  REAIMGUIAPI_EXTERN int DragDropFlags_AcceptBeforeDelivery;
  REAIMGUIAPI_EXTERN int DragDropFlags_AcceptNoDrawDefaultRect;
  REAIMGUIAPI_EXTERN int DragDropFlags_AcceptNoPreviewTooltip;
  REAIMGUIAPI_EXTERN int DragDropFlags_AcceptPeekOnly;
  REAIMGUIAPI_EXTERN int DragDropFlags_PayloadAutoExpire;
  REAIMGUIAPI_EXTERN int DragDropFlags_SourceAllowNullID;
  REAIMGUIAPI_EXTERN int DragDropFlags_SourceExtern;
  REAIMGUIAPI_EXTERN int DragDropFlags_SourceNoDisableHover;
  REAIMGUIAPI_EXTERN int DragDropFlags_SourceNoHoldToOpenOthers;
  REAIMGUIAPI_EXTERN int DragDropFlags_SourceNoPreviewTooltip;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* vInOut, details::optional<double> v_speedInOptional, details::optional<double> v_minInOptional, details::optional<double> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragDouble;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, details::optional<double> v_speedInOptional, details::optional<double> v_minInOptional, details::optional<double> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragDouble2;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, details::optional<double> v_speedInOptional, details::optional<double> v_minInOptional, details::optional<double> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragDouble3;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, details::optional<double> v_speedInOptional, details::optional<double> v_minInOptional, details::optional<double> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragDouble4;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, reaper_array* values, details::optional<double> speedInOptional, details::optional<double> minInOptional, details::optional<double> maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragDoubleN;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v_current_minInOut, double* v_current_maxInOut, details::optional<double> v_speedInOptional, details::optional<double> v_minInOptional, details::optional<double> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<const char*> format_maxInOptional, details::optional<int> flagsInOptional)> DragFloatRange2;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* vInOut, details::optional<double> v_speedInOptional, details::optional<int> v_minInOptional, details::optional<int> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragInt;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, details::optional<double> v_speedInOptional, details::optional<int> v_minInOptional, details::optional<int> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragInt2;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, details::optional<double> v_speedInOptional, details::optional<int> v_minInOptional, details::optional<int> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragInt3;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, details::optional<double> v_speedInOptional, details::optional<int> v_minInOptional, details::optional<int> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> DragInt4;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v_current_minInOut, int* v_current_maxInOut, details::optional<double> v_speedInOptional, details::optional<int> v_minInOptional, details::optional<int> v_maxInOptional, details::optional<const char*> formatInOptional, details::optional<const char*> format_maxInOptional, details::optional<int> flagsInOptional)> DragIntRange2;
  REAIMGUIAPI_EXTERN int SliderFlags_AlwaysClamp;
  REAIMGUIAPI_EXTERN int SliderFlags_Logarithmic;
  REAIMGUIAPI_EXTERN int SliderFlags_NoInput;
  REAIMGUIAPI_EXTERN int SliderFlags_NoRoundToFormat;
  REAIMGUIAPI_EXTERN int SliderFlags_None;
  REAIMGUIAPI_EXTERN int SliderFlags_WrapAround;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v_radInOut, details::optional<double> v_degrees_minInOptional, details::optional<double> v_degrees_maxInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderAngle;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* vInOut, double v_min, double v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderDouble;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double v_min, double v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderDouble2;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double v_min, double v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderDouble3;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double v_min, double v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderDouble4;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, reaper_array* values, double v_min, double v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderDoubleN;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* vInOut, int v_min, int v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderInt;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int v_min, int v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderInt2;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int v_min, int v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderInt3;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int v_min, int v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> SliderInt4;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double size_w, double size_h, double* vInOut, double v_min, double v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> VSliderDouble;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double size_w, double size_h, int* vInOut, int v_min, int v_max, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> VSliderInt;
  REAIMGUIAPI_EXTERN int DrawFlags_Closed;
  REAIMGUIAPI_EXTERN int DrawFlags_None;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersAll;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersBottom;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersBottomLeft;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersBottomRight;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersLeft;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersNone;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersRight;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersTop;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersTopLeft;
  REAIMGUIAPI_EXTERN int DrawFlags_RoundCornersTopRight;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list)> DrawList_PopClipRect;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, details::optional<bool> intersect_with_current_clip_rectInOptional)> DrawList_PushClipRect;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list)> DrawList_PushClipRectFullScreen;
  REAIMGUIAPI_EXTERN details::function<ImGui_DrawList*(ImGui_Context* ctx)> GetBackgroundDrawList;
  REAIMGUIAPI_EXTERN details::function<ImGui_DrawList*(ImGui_Context* ctx)> GetForegroundDrawList;
  REAIMGUIAPI_EXTERN details::function<ImGui_DrawList*(ImGui_Context* ctx)> GetWindowDrawList;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double thickness, details::optional<int> num_segmentsInOptional)> DrawList_AddBezierCubic;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double thickness, details::optional<int> num_segmentsInOptional)> DrawList_AddBezierQuadratic;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, details::optional<int> num_segmentsInOptional, details::optional<double> thicknessInOptional)> DrawList_AddCircle;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, details::optional<int> num_segmentsInOptional)> DrawList_AddCircleFilled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba)> DrawList_AddConcavePolyFilled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba)> DrawList_AddConvexPolyFilled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius_x, double radius_y, int col_rgba, details::optional<double> rotInOptional, details::optional<int> num_segmentsInOptional, details::optional<double> thicknessInOptional)> DrawList_AddEllipse;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius_x, double radius_y, int col_rgba, details::optional<double> rotInOptional, details::optional<int> num_segmentsInOptional)> DrawList_AddEllipseFilled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, ImGui_Image* image, double p_min_x, double p_min_y, double p_max_x, double p_max_y, details::optional<double> uv_min_xInOptional, details::optional<double> uv_min_yInOptional, details::optional<double> uv_max_xInOptional, details::optional<double> uv_max_yInOptional, details::optional<int> col_rgbaInOptional)> DrawList_AddImage;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, ImGui_Image* image, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, details::optional<double> uv1_xInOptional, details::optional<double> uv1_yInOptional, details::optional<double> uv2_xInOptional, details::optional<double> uv2_yInOptional, details::optional<double> uv3_xInOptional, details::optional<double> uv3_yInOptional, details::optional<double> uv4_xInOptional, details::optional<double> uv4_yInOptional, details::optional<int> col_rgbaInOptional)> DrawList_AddImageQuad;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, ImGui_Image* image, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double uv_min_x, double uv_min_y, double uv_max_x, double uv_max_y, int col_rgba, double rounding, details::optional<int> flagsInOptional)> DrawList_AddImageRounded;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, int col_rgba, details::optional<double> thicknessInOptional)> DrawList_AddLine;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments, details::optional<double> thicknessInOptional)> DrawList_AddNgon;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments)> DrawList_AddNgonFilled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba, int flags, double thickness)> DrawList_AddPolyline;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, details::optional<double> thicknessInOptional)> DrawList_AddQuad;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba)> DrawList_AddQuadFilled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, details::optional<double> roundingInOptional, details::optional<int> flagsInOptional, details::optional<double> thicknessInOptional)> DrawList_AddRect;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, details::optional<double> roundingInOptional, details::optional<int> flagsInOptional)> DrawList_AddRectFilled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)> DrawList_AddRectFilledMultiColor;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double x, double y, int col_rgba, const char* text)> DrawList_AddText;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, ImGui_Font* font, double font_size, double pos_x, double pos_y, int col_rgba, const char* text, details::optional<double> wrap_widthInOptional, details::optional<double> cpu_fine_clip_rect_min_xInOptional, details::optional<double> cpu_fine_clip_rect_min_yInOptional, details::optional<double> cpu_fine_clip_rect_max_xInOptional, details::optional<double> cpu_fine_clip_rect_max_yInOptional)> DrawList_AddTextEx;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, details::optional<double> thicknessInOptional)> DrawList_AddTriangle;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba)> DrawList_AddTriangleFilled;
  REAIMGUIAPI_EXTERN details::function<ImGui_DrawListSplitter*(ImGui_DrawList* draw_list), true> CreateDrawListSplitter;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawListSplitter* splitter)> DrawListSplitter_Clear;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawListSplitter* splitter)> DrawListSplitter_Merge;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawListSplitter* splitter, int channel_idx)> DrawListSplitter_SetCurrentChannel;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawListSplitter* splitter, int count)> DrawListSplitter_Split;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, double a_min, double a_max, details::optional<int> num_segmentsInOptional)> DrawList_PathArcTo;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int a_min_of_12, int a_max_of_12)> DrawList_PathArcToFast;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, details::optional<int> num_segmentsInOptional)> DrawList_PathBezierCubicCurveTo;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, details::optional<int> num_segmentsInOptional)> DrawList_PathBezierQuadraticCurveTo;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list)> DrawList_PathClear;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double center_x, double center_y, double radius_x, double radius_y, double rot, double a_min, double a_max, details::optional<int> num_segmentsInOptional)> DrawList_PathEllipticalArcTo;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, int col_rgba)> DrawList_PathFillConcave;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, int col_rgba)> DrawList_PathFillConvex;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double pos_x, double pos_y)> DrawList_PathLineTo;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y, details::optional<double> roundingInOptional, details::optional<int> flagsInOptional)> DrawList_PathRect;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_DrawList* draw_list, int col_rgba, details::optional<int> flagsInOptional, details::optional<double> thicknessInOptional)> DrawList_PathStroke;
  REAIMGUIAPI_EXTERN details::function<ImGui_Font*(const char* family_or_file, int size, details::optional<int> flagsInOptional), true> CreateFont;
  REAIMGUIAPI_EXTERN details::function<ImGui_Font*(const char* data, int data_sz, int size, details::optional<int> flagsInOptional), true> CreateFontFromMem;
  REAIMGUIAPI_EXTERN int FontFlags_Bold;
  REAIMGUIAPI_EXTERN int FontFlags_Italic;
  REAIMGUIAPI_EXTERN int FontFlags_None;
  REAIMGUIAPI_EXTERN details::function<ImGui_Font*(ImGui_Context* ctx)> GetFont;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetFontSize;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> PopFont;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, ImGui_Font* font)> PushFont;
  REAIMGUIAPI_EXTERN details::function<ImGui_Function*(const char* code), true> CreateFunctionFromEEL;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Function* func)> Function_Execute;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Function* func, const char* name)> Function_GetValue;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Function* func, const char* name, reaper_array* values)> Function_GetValue_Array;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Function* func, const char* name, char* valueOutNeedBig, int valueOutNeedBig_sz)> Function_GetValue_String;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Function* func, const char* name, double value)> Function_SetValue;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Function* func, const char* name, reaper_array* values)> Function_SetValue_Array;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Function* func, const char* name, const char* value, int value_sz)> Function_SetValue_String;
  REAIMGUIAPI_EXTERN details::function<ImGui_Image*(const char* file, details::optional<int> flagsInOptional), true> CreateImage;
  REAIMGUIAPI_EXTERN details::function<ImGui_Image*(LICE_IBitmap* bitmap, details::optional<int> flagsInOptional), true> CreateImageFromLICE;
  REAIMGUIAPI_EXTERN details::function<ImGui_Image*(const char* data, int data_sz, details::optional<int> flagsInOptional), true> CreateImageFromMem;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, ImGui_Image* image, double image_size_w, double image_size_h, details::optional<double> uv0_xInOptional, details::optional<double> uv0_yInOptional, details::optional<double> uv1_xInOptional, details::optional<double> uv1_yInOptional, details::optional<int> tint_col_rgbaInOptional, details::optional<int> border_col_rgbaInOptional)> Image;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, ImGui_Image* image, double image_size_w, double image_size_h, details::optional<double> uv0_xInOptional, details::optional<double> uv0_yInOptional, details::optional<double> uv1_xInOptional, details::optional<double> uv1_yInOptional, details::optional<int> bg_col_rgbaInOptional, details::optional<int> tint_col_rgbaInOptional)> ImageButton;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Image* image, double* wOut, double* hOut)> Image_GetSize;
  REAIMGUIAPI_EXTERN details::function<ImGui_ImageSet*(), true> CreateImageSet;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_ImageSet* set, double scale, ImGui_Image* image)> ImageSet_Add;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<bool> disabledInOptional)> BeginDisabled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> DebugStartItemPicker;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndDisabled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> SetNextItemAllowOverlap;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> CalcItemWidth;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetItemRectMax;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetItemRectMin;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* wOut, double* hOut)> GetItemRectSize;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> PopItemWidth;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double item_width)> PushItemWidth;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double item_width)> SetNextItemWidth;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> PopTabStop;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, bool tab_stop)> PushTabStop;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> SetItemDefaultFocus;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<int> offsetInOptional)> SetKeyboardFocusHere;
  REAIMGUIAPI_EXTERN int HoveredFlags_AllowWhenBlockedByActiveItem;
  REAIMGUIAPI_EXTERN int HoveredFlags_AllowWhenBlockedByPopup;
  REAIMGUIAPI_EXTERN int HoveredFlags_ForTooltip;
  REAIMGUIAPI_EXTERN int HoveredFlags_NoNavOverride;
  REAIMGUIAPI_EXTERN int HoveredFlags_None;
  REAIMGUIAPI_EXTERN int HoveredFlags_Stationary;
  REAIMGUIAPI_EXTERN int HoveredFlags_AllowWhenDisabled;
  REAIMGUIAPI_EXTERN int HoveredFlags_AllowWhenOverlapped;
  REAIMGUIAPI_EXTERN int HoveredFlags_AllowWhenOverlappedByItem;
  REAIMGUIAPI_EXTERN int HoveredFlags_AllowWhenOverlappedByWindow;
  REAIMGUIAPI_EXTERN int HoveredFlags_RectOnly;
  REAIMGUIAPI_EXTERN int HoveredFlags_DelayNone;
  REAIMGUIAPI_EXTERN int HoveredFlags_DelayNormal;
  REAIMGUIAPI_EXTERN int HoveredFlags_DelayShort;
  REAIMGUIAPI_EXTERN int HoveredFlags_NoSharedDelay;
  REAIMGUIAPI_EXTERN int HoveredFlags_AnyWindow;
  REAIMGUIAPI_EXTERN int HoveredFlags_ChildWindows;
  REAIMGUIAPI_EXTERN int HoveredFlags_DockHierarchy;
  REAIMGUIAPI_EXTERN int HoveredFlags_NoPopupHierarchy;
  REAIMGUIAPI_EXTERN int HoveredFlags_RootAndChildWindows;
  REAIMGUIAPI_EXTERN int HoveredFlags_RootWindow;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsAnyItemActive;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsAnyItemFocused;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsAnyItemHovered;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsItemActivated;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsItemActive;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, details::optional<int> mouse_buttonInOptional)> IsItemClicked;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsItemDeactivated;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsItemDeactivatedAfterEdit;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsItemEdited;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsItemFocused;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, details::optional<int> flagsInOptional)> IsItemHovered;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsItemVisible;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int idx, int* unicode_charOut)> GetInputQueueCharacter;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx, int key)> GetKeyDownDuration;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx)> GetKeyMods;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx, int key, double repeat_delay, double rate)> GetKeyPressedAmount;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int key)> IsKeyDown;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int key, details::optional<bool> repeatInOptional)> IsKeyPressed;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int key)> IsKeyReleased;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, bool want_capture_keyboard)> SetNextFrameWantCaptureKeyboard;
  REAIMGUIAPI_EXTERN int Key_0;
  REAIMGUIAPI_EXTERN int Key_1;
  REAIMGUIAPI_EXTERN int Key_2;
  REAIMGUIAPI_EXTERN int Key_3;
  REAIMGUIAPI_EXTERN int Key_4;
  REAIMGUIAPI_EXTERN int Key_5;
  REAIMGUIAPI_EXTERN int Key_6;
  REAIMGUIAPI_EXTERN int Key_7;
  REAIMGUIAPI_EXTERN int Key_8;
  REAIMGUIAPI_EXTERN int Key_9;
  REAIMGUIAPI_EXTERN int Key_A;
  REAIMGUIAPI_EXTERN int Key_Apostrophe;
  REAIMGUIAPI_EXTERN int Key_AppBack;
  REAIMGUIAPI_EXTERN int Key_AppForward;
  REAIMGUIAPI_EXTERN int Key_B;
  REAIMGUIAPI_EXTERN int Key_Backslash;
  REAIMGUIAPI_EXTERN int Key_Backspace;
  REAIMGUIAPI_EXTERN int Key_C;
  REAIMGUIAPI_EXTERN int Key_CapsLock;
  REAIMGUIAPI_EXTERN int Key_Comma;
  REAIMGUIAPI_EXTERN int Key_D;
  REAIMGUIAPI_EXTERN int Key_Delete;
  REAIMGUIAPI_EXTERN int Key_DownArrow;
  REAIMGUIAPI_EXTERN int Key_E;
  REAIMGUIAPI_EXTERN int Key_End;
  REAIMGUIAPI_EXTERN int Key_Enter;
  REAIMGUIAPI_EXTERN int Key_Equal;
  REAIMGUIAPI_EXTERN int Key_Escape;
  REAIMGUIAPI_EXTERN int Key_F;
  REAIMGUIAPI_EXTERN int Key_F1;
  REAIMGUIAPI_EXTERN int Key_F10;
  REAIMGUIAPI_EXTERN int Key_F11;
  REAIMGUIAPI_EXTERN int Key_F12;
  REAIMGUIAPI_EXTERN int Key_F13;
  REAIMGUIAPI_EXTERN int Key_F14;
  REAIMGUIAPI_EXTERN int Key_F15;
  REAIMGUIAPI_EXTERN int Key_F16;
  REAIMGUIAPI_EXTERN int Key_F17;
  REAIMGUIAPI_EXTERN int Key_F18;
  REAIMGUIAPI_EXTERN int Key_F19;
  REAIMGUIAPI_EXTERN int Key_F2;
  REAIMGUIAPI_EXTERN int Key_F20;
  REAIMGUIAPI_EXTERN int Key_F21;
  REAIMGUIAPI_EXTERN int Key_F22;
  REAIMGUIAPI_EXTERN int Key_F23;
  REAIMGUIAPI_EXTERN int Key_F24;
  REAIMGUIAPI_EXTERN int Key_F3;
  REAIMGUIAPI_EXTERN int Key_F4;
  REAIMGUIAPI_EXTERN int Key_F5;
  REAIMGUIAPI_EXTERN int Key_F6;
  REAIMGUIAPI_EXTERN int Key_F7;
  REAIMGUIAPI_EXTERN int Key_F8;
  REAIMGUIAPI_EXTERN int Key_F9;
  REAIMGUIAPI_EXTERN int Key_G;
  REAIMGUIAPI_EXTERN int Key_GraveAccent;
  REAIMGUIAPI_EXTERN int Key_H;
  REAIMGUIAPI_EXTERN int Key_Home;
  REAIMGUIAPI_EXTERN int Key_I;
  REAIMGUIAPI_EXTERN int Key_Insert;
  REAIMGUIAPI_EXTERN int Key_J;
  REAIMGUIAPI_EXTERN int Key_K;
  REAIMGUIAPI_EXTERN int Key_Keypad0;
  REAIMGUIAPI_EXTERN int Key_Keypad1;
  REAIMGUIAPI_EXTERN int Key_Keypad2;
  REAIMGUIAPI_EXTERN int Key_Keypad3;
  REAIMGUIAPI_EXTERN int Key_Keypad4;
  REAIMGUIAPI_EXTERN int Key_Keypad5;
  REAIMGUIAPI_EXTERN int Key_Keypad6;
  REAIMGUIAPI_EXTERN int Key_Keypad7;
  REAIMGUIAPI_EXTERN int Key_Keypad8;
  REAIMGUIAPI_EXTERN int Key_Keypad9;
  REAIMGUIAPI_EXTERN int Key_KeypadAdd;
  REAIMGUIAPI_EXTERN int Key_KeypadDecimal;
  REAIMGUIAPI_EXTERN int Key_KeypadDivide;
  REAIMGUIAPI_EXTERN int Key_KeypadEnter;
  REAIMGUIAPI_EXTERN int Key_KeypadEqual;
  REAIMGUIAPI_EXTERN int Key_KeypadMultiply;
  REAIMGUIAPI_EXTERN int Key_KeypadSubtract;
  REAIMGUIAPI_EXTERN int Key_L;
  REAIMGUIAPI_EXTERN int Key_LeftAlt;
  REAIMGUIAPI_EXTERN int Key_LeftArrow;
  REAIMGUIAPI_EXTERN int Key_LeftBracket;
  REAIMGUIAPI_EXTERN int Key_LeftCtrl;
  REAIMGUIAPI_EXTERN int Key_LeftShift;
  REAIMGUIAPI_EXTERN int Key_LeftSuper;
  REAIMGUIAPI_EXTERN int Key_M;
  REAIMGUIAPI_EXTERN int Key_Menu;
  REAIMGUIAPI_EXTERN int Key_Minus;
  REAIMGUIAPI_EXTERN int Key_N;
  REAIMGUIAPI_EXTERN int Key_NumLock;
  REAIMGUIAPI_EXTERN int Key_O;
  REAIMGUIAPI_EXTERN int Key_P;
  REAIMGUIAPI_EXTERN int Key_PageDown;
  REAIMGUIAPI_EXTERN int Key_PageUp;
  REAIMGUIAPI_EXTERN int Key_Pause;
  REAIMGUIAPI_EXTERN int Key_Period;
  REAIMGUIAPI_EXTERN int Key_PrintScreen;
  REAIMGUIAPI_EXTERN int Key_Q;
  REAIMGUIAPI_EXTERN int Key_R;
  REAIMGUIAPI_EXTERN int Key_RightAlt;
  REAIMGUIAPI_EXTERN int Key_RightArrow;
  REAIMGUIAPI_EXTERN int Key_RightBracket;
  REAIMGUIAPI_EXTERN int Key_RightCtrl;
  REAIMGUIAPI_EXTERN int Key_RightShift;
  REAIMGUIAPI_EXTERN int Key_RightSuper;
  REAIMGUIAPI_EXTERN int Key_S;
  REAIMGUIAPI_EXTERN int Key_ScrollLock;
  REAIMGUIAPI_EXTERN int Key_Semicolon;
  REAIMGUIAPI_EXTERN int Key_Slash;
  REAIMGUIAPI_EXTERN int Key_Space;
  REAIMGUIAPI_EXTERN int Key_T;
  REAIMGUIAPI_EXTERN int Key_Tab;
  REAIMGUIAPI_EXTERN int Key_U;
  REAIMGUIAPI_EXTERN int Key_UpArrow;
  REAIMGUIAPI_EXTERN int Key_V;
  REAIMGUIAPI_EXTERN int Key_W;
  REAIMGUIAPI_EXTERN int Key_X;
  REAIMGUIAPI_EXTERN int Key_Y;
  REAIMGUIAPI_EXTERN int Key_Z;
  REAIMGUIAPI_EXTERN int Mod_Alt;
  REAIMGUIAPI_EXTERN int Mod_Ctrl;
  REAIMGUIAPI_EXTERN int Mod_None;
  REAIMGUIAPI_EXTERN int Mod_Shift;
  REAIMGUIAPI_EXTERN int Mod_Super;
  REAIMGUIAPI_EXTERN int Key_MouseLeft;
  REAIMGUIAPI_EXTERN int Key_MouseMiddle;
  REAIMGUIAPI_EXTERN int Key_MouseRight;
  REAIMGUIAPI_EXTERN int Key_MouseWheelX;
  REAIMGUIAPI_EXTERN int Key_MouseWheelY;
  REAIMGUIAPI_EXTERN int Key_MouseX1;
  REAIMGUIAPI_EXTERN int Key_MouseX2;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx, int button)> GetMouseClickedCount;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int button, double* xOut, double* yOut)> GetMouseClickedPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetMouseDelta;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx, int button)> GetMouseDownDuration;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut, details::optional<int> buttonInOptional, details::optional<double> lock_thresholdInOptional)> GetMouseDragDelta;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetMousePos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetMousePosOnOpeningCurrentPopup;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* verticalOut, double* horizontalOut)> GetMouseWheel;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsAnyMouseDown;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int button, details::optional<bool> repeatInOptional)> IsMouseClicked;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int button)> IsMouseDoubleClicked;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int button)> IsMouseDown;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int button, details::optional<double> lock_thresholdInOptional)> IsMouseDragging;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, double r_min_x, double r_min_y, double r_max_x, double r_max_y, details::optional<bool> clipInOptional)> IsMouseHoveringRect;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, details::optional<double> mouse_pos_xInOptional, details::optional<double> mouse_pos_yInOptional)> IsMousePosValid;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int button)> IsMouseReleased;
  REAIMGUIAPI_EXTERN int MouseButton_Left;
  REAIMGUIAPI_EXTERN int MouseButton_Middle;
  REAIMGUIAPI_EXTERN int MouseButton_Right;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<int> buttonInOptional)> ResetMouseDragDelta;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx)> GetMouseCursor;
  REAIMGUIAPI_EXTERN int MouseCursor_Arrow;
  REAIMGUIAPI_EXTERN int MouseCursor_Hand;
  REAIMGUIAPI_EXTERN int MouseCursor_None;
  REAIMGUIAPI_EXTERN int MouseCursor_NotAllowed;
  REAIMGUIAPI_EXTERN int MouseCursor_ResizeAll;
  REAIMGUIAPI_EXTERN int MouseCursor_ResizeEW;
  REAIMGUIAPI_EXTERN int MouseCursor_ResizeNESW;
  REAIMGUIAPI_EXTERN int MouseCursor_ResizeNS;
  REAIMGUIAPI_EXTERN int MouseCursor_ResizeNWSE;
  REAIMGUIAPI_EXTERN int MouseCursor_TextInput;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int cursor_type)> SetMouseCursor;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int key_chord)> IsKeyChordPressed;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int key_chord, details::optional<int> flagsInOptional)> SetNextItemShortcut;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int key_chord, details::optional<int> flagsInOptional)> Shortcut;
  REAIMGUIAPI_EXTERN int InputFlags_None;
  REAIMGUIAPI_EXTERN int InputFlags_Repeat;
  REAIMGUIAPI_EXTERN int InputFlags_RouteFromRootWindow;
  REAIMGUIAPI_EXTERN int InputFlags_RouteOverActive;
  REAIMGUIAPI_EXTERN int InputFlags_RouteOverFocused;
  REAIMGUIAPI_EXTERN int InputFlags_RouteUnlessBgFocused;
  REAIMGUIAPI_EXTERN int InputFlags_Tooltip;
  REAIMGUIAPI_EXTERN int InputFlags_RouteActive;
  REAIMGUIAPI_EXTERN int InputFlags_RouteAlways;
  REAIMGUIAPI_EXTERN int InputFlags_RouteFocused;
  REAIMGUIAPI_EXTERN int InputFlags_RouteGlobal;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> BeginGroup;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double size_w, double size_h)> Dummy;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndGroup;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<double> indent_wInOptional)> Indent;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> NewLine;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<double> offset_from_start_xInOptional, details::optional<double> spacingInOptional)> SameLine;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> Separator;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* label)> SeparatorText;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> Spacing;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<double> indent_wInOptional)> Unindent;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, double size_w, double size_h)> IsRectVisible;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y)> IsRectVisibleEx;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> PopClipRect;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool intersect_with_current_clip_rect)> PushClipRect;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetCursorPos;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetCursorPosX;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetCursorPosY;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetCursorScreenPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetCursorStartPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double local_pos_x, double local_pos_y)> SetCursorPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double local_x)> SetCursorPosX;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double local_y)> SetCursorPosY;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double pos_x, double pos_y)> SetCursorScreenPos;
  REAIMGUIAPI_EXTERN details::function<ImGui_ListClipper*(ImGui_Context* ctx), true> CreateListClipper;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_ListClipper* clipper, int items_count, details::optional<double> items_heightInOptional)> ListClipper_Begin;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_ListClipper* clipper)> ListClipper_End;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_ListClipper* clipper, int* display_startOut, int* display_endOut)> ListClipper_GetDisplayRange;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_ListClipper* clipper, int item_index)> ListClipper_IncludeItemByIndex;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_ListClipper* clipper, int item_begin, int item_end)> ListClipper_IncludeItemsByIndex;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_ListClipper* clipper)> ListClipper_Step;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<bool> enabledInOptional), true> BeginMenu;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx), true> BeginMenuBar;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndMenu;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndMenuBar;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<const char*> shortcutInOptional, details::optional<bool*> p_selectedInOutOptional, details::optional<bool> enabledInOptional)> MenuItem;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* label, reaper_array* values, details::optional<int> values_offsetInOptional, details::optional<const char*> overlay_textInOptional, details::optional<double> scale_minInOptional, details::optional<double> scale_maxInOptional, details::optional<double> graph_size_wInOptional, details::optional<double> graph_size_hInOptional)> PlotHistogram;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* label, reaper_array* values, details::optional<int> values_offsetInOptional, details::optional<const char*> overlay_textInOptional, details::optional<double> scale_minInOptional, details::optional<double> scale_maxInOptional, details::optional<double> graph_size_wInOptional, details::optional<double> graph_size_hInOptional)> PlotLines;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, details::optional<int> flagsInOptional), true> BeginPopup;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* name, details::optional<bool*> p_openInOutOptional, details::optional<int> flagsInOptional), true> BeginPopupModal;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> CloseCurrentPopup;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndPopup;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, details::optional<int> flagsInOptional)> IsPopupOpen;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* str_id, details::optional<int> popup_flagsInOptional)> OpenPopup;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<const char*> str_idInOptional, details::optional<int> popup_flagsInOptional)> OpenPopupOnItemClick;
  REAIMGUIAPI_EXTERN int PopupFlags_None;
  REAIMGUIAPI_EXTERN int PopupFlags_MouseButtonLeft;
  REAIMGUIAPI_EXTERN int PopupFlags_MouseButtonMiddle;
  REAIMGUIAPI_EXTERN int PopupFlags_MouseButtonRight;
  REAIMGUIAPI_EXTERN int PopupFlags_NoOpenOverItems;
  REAIMGUIAPI_EXTERN int PopupFlags_AnyPopup;
  REAIMGUIAPI_EXTERN int PopupFlags_AnyPopupId;
  REAIMGUIAPI_EXTERN int PopupFlags_AnyPopupLevel;
  REAIMGUIAPI_EXTERN int PopupFlags_NoOpenOverExistingPopup;
  REAIMGUIAPI_EXTERN int PopupFlags_NoReopen;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, details::optional<const char*> str_idInOptional, details::optional<int> popup_flagsInOptional), true> BeginPopupContextItem;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, details::optional<const char*> str_idInOptional, details::optional<int> popup_flagsInOptional), true> BeginPopupContextWindow;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx), true> BeginItemTooltip;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx), true> BeginTooltip;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndTooltip;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> SetItemTooltip;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> SetTooltip;
  REAIMGUIAPI_EXTERN int Col_Border;
  REAIMGUIAPI_EXTERN int Col_BorderShadow;
  REAIMGUIAPI_EXTERN int Col_Button;
  REAIMGUIAPI_EXTERN int Col_ButtonActive;
  REAIMGUIAPI_EXTERN int Col_ButtonHovered;
  REAIMGUIAPI_EXTERN int Col_CheckMark;
  REAIMGUIAPI_EXTERN int Col_ChildBg;
  REAIMGUIAPI_EXTERN int Col_DockingEmptyBg;
  REAIMGUIAPI_EXTERN int Col_DockingPreview;
  REAIMGUIAPI_EXTERN int Col_DragDropTarget;
  REAIMGUIAPI_EXTERN int Col_FrameBg;
  REAIMGUIAPI_EXTERN int Col_FrameBgActive;
  REAIMGUIAPI_EXTERN int Col_FrameBgHovered;
  REAIMGUIAPI_EXTERN int Col_Header;
  REAIMGUIAPI_EXTERN int Col_HeaderActive;
  REAIMGUIAPI_EXTERN int Col_HeaderHovered;
  REAIMGUIAPI_EXTERN int Col_MenuBarBg;
  REAIMGUIAPI_EXTERN int Col_ModalWindowDimBg;
  REAIMGUIAPI_EXTERN int Col_NavHighlight;
  REAIMGUIAPI_EXTERN int Col_NavWindowingDimBg;
  REAIMGUIAPI_EXTERN int Col_NavWindowingHighlight;
  REAIMGUIAPI_EXTERN int Col_PlotHistogram;
  REAIMGUIAPI_EXTERN int Col_PlotHistogramHovered;
  REAIMGUIAPI_EXTERN int Col_PlotLines;
  REAIMGUIAPI_EXTERN int Col_PlotLinesHovered;
  REAIMGUIAPI_EXTERN int Col_PopupBg;
  REAIMGUIAPI_EXTERN int Col_ResizeGrip;
  REAIMGUIAPI_EXTERN int Col_ResizeGripActive;
  REAIMGUIAPI_EXTERN int Col_ResizeGripHovered;
  REAIMGUIAPI_EXTERN int Col_ScrollbarBg;
  REAIMGUIAPI_EXTERN int Col_ScrollbarGrab;
  REAIMGUIAPI_EXTERN int Col_ScrollbarGrabActive;
  REAIMGUIAPI_EXTERN int Col_ScrollbarGrabHovered;
  REAIMGUIAPI_EXTERN int Col_Separator;
  REAIMGUIAPI_EXTERN int Col_SeparatorActive;
  REAIMGUIAPI_EXTERN int Col_SeparatorHovered;
  REAIMGUIAPI_EXTERN int Col_SliderGrab;
  REAIMGUIAPI_EXTERN int Col_SliderGrabActive;
  REAIMGUIAPI_EXTERN int Col_Tab;
  REAIMGUIAPI_EXTERN int Col_TabDimmed;
  REAIMGUIAPI_EXTERN int Col_TabDimmedSelected;
  REAIMGUIAPI_EXTERN int Col_TabDimmedSelectedOverline;
  REAIMGUIAPI_EXTERN int Col_TabHovered;
  REAIMGUIAPI_EXTERN int Col_TabSelected;
  REAIMGUIAPI_EXTERN int Col_TabSelectedOverline;
  REAIMGUIAPI_EXTERN int Col_TableBorderLight;
  REAIMGUIAPI_EXTERN int Col_TableBorderStrong;
  REAIMGUIAPI_EXTERN int Col_TableHeaderBg;
  REAIMGUIAPI_EXTERN int Col_TableRowBg;
  REAIMGUIAPI_EXTERN int Col_TableRowBgAlt;
  REAIMGUIAPI_EXTERN int Col_Text;
  REAIMGUIAPI_EXTERN int Col_TextDisabled;
  REAIMGUIAPI_EXTERN int Col_TextSelectedBg;
  REAIMGUIAPI_EXTERN int Col_TitleBg;
  REAIMGUIAPI_EXTERN int Col_TitleBgActive;
  REAIMGUIAPI_EXTERN int Col_TitleBgCollapsed;
  REAIMGUIAPI_EXTERN int Col_WindowBg;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int idx)> DebugFlashStyleColor;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx, int idx, details::optional<double> alpha_mulInOptional)> GetColor;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx, int col_rgba, details::optional<double> alpha_mulInOptional)> GetColorEx;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx, int idx)> GetStyleColor;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<int> countInOptional)> PopStyleColor;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int idx, int col_rgba)> PushStyleColor;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int var_idx, double* val1Out, double* val2Out)> GetStyleVar;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<int> countInOptional)> PopStyleVar;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int var_idx, double val1, details::optional<double> val2InOptional)> PushStyleVar;
  REAIMGUIAPI_EXTERN int StyleVar_Alpha;
  REAIMGUIAPI_EXTERN int StyleVar_ButtonTextAlign;
  REAIMGUIAPI_EXTERN int StyleVar_CellPadding;
  REAIMGUIAPI_EXTERN int StyleVar_ChildBorderSize;
  REAIMGUIAPI_EXTERN int StyleVar_ChildRounding;
  REAIMGUIAPI_EXTERN int StyleVar_DisabledAlpha;
  REAIMGUIAPI_EXTERN int StyleVar_FrameBorderSize;
  REAIMGUIAPI_EXTERN int StyleVar_FramePadding;
  REAIMGUIAPI_EXTERN int StyleVar_FrameRounding;
  REAIMGUIAPI_EXTERN int StyleVar_GrabMinSize;
  REAIMGUIAPI_EXTERN int StyleVar_GrabRounding;
  REAIMGUIAPI_EXTERN int StyleVar_IndentSpacing;
  REAIMGUIAPI_EXTERN int StyleVar_ItemInnerSpacing;
  REAIMGUIAPI_EXTERN int StyleVar_ItemSpacing;
  REAIMGUIAPI_EXTERN int StyleVar_PopupBorderSize;
  REAIMGUIAPI_EXTERN int StyleVar_PopupRounding;
  REAIMGUIAPI_EXTERN int StyleVar_ScrollbarRounding;
  REAIMGUIAPI_EXTERN int StyleVar_ScrollbarSize;
  REAIMGUIAPI_EXTERN int StyleVar_SelectableTextAlign;
  REAIMGUIAPI_EXTERN int StyleVar_SeparatorTextAlign;
  REAIMGUIAPI_EXTERN int StyleVar_SeparatorTextBorderSize;
  REAIMGUIAPI_EXTERN int StyleVar_SeparatorTextPadding;
  REAIMGUIAPI_EXTERN int StyleVar_TabBarBorderSize;
  REAIMGUIAPI_EXTERN int StyleVar_TabBorderSize;
  REAIMGUIAPI_EXTERN int StyleVar_TabRounding;
  REAIMGUIAPI_EXTERN int StyleVar_TableAngledHeadersAngle;
  REAIMGUIAPI_EXTERN int StyleVar_TableAngledHeadersTextAlign;
  REAIMGUIAPI_EXTERN int StyleVar_WindowBorderSize;
  REAIMGUIAPI_EXTERN int StyleVar_WindowMinSize;
  REAIMGUIAPI_EXTERN int StyleVar_WindowPadding;
  REAIMGUIAPI_EXTERN int StyleVar_WindowRounding;
  REAIMGUIAPI_EXTERN int StyleVar_WindowTitleAlign;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, details::optional<int> flagsInOptional), true> BeginTabBar;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndTabBar;
  REAIMGUIAPI_EXTERN int TabBarFlags_AutoSelectNewTabs;
  REAIMGUIAPI_EXTERN int TabBarFlags_DrawSelectedOverline;
  REAIMGUIAPI_EXTERN int TabBarFlags_FittingPolicyResizeDown;
  REAIMGUIAPI_EXTERN int TabBarFlags_FittingPolicyScroll;
  REAIMGUIAPI_EXTERN int TabBarFlags_NoCloseWithMiddleMouseButton;
  REAIMGUIAPI_EXTERN int TabBarFlags_NoTabListScrollingButtons;
  REAIMGUIAPI_EXTERN int TabBarFlags_NoTooltip;
  REAIMGUIAPI_EXTERN int TabBarFlags_None;
  REAIMGUIAPI_EXTERN int TabBarFlags_Reorderable;
  REAIMGUIAPI_EXTERN int TabBarFlags_TabListPopupButton;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<bool*> p_openInOutOptional, details::optional<int> flagsInOptional), true> BeginTabItem;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndTabItem;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* tab_or_docked_window_label)> SetTabItemClosed;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<int> flagsInOptional)> TabItemButton;
  REAIMGUIAPI_EXTERN int TabItemFlags_Leading;
  REAIMGUIAPI_EXTERN int TabItemFlags_NoAssumedClosure;
  REAIMGUIAPI_EXTERN int TabItemFlags_NoCloseWithMiddleMouseButton;
  REAIMGUIAPI_EXTERN int TabItemFlags_NoPushId;
  REAIMGUIAPI_EXTERN int TabItemFlags_NoReorder;
  REAIMGUIAPI_EXTERN int TabItemFlags_NoTooltip;
  REAIMGUIAPI_EXTERN int TabItemFlags_None;
  REAIMGUIAPI_EXTERN int TabItemFlags_SetSelected;
  REAIMGUIAPI_EXTERN int TabItemFlags_Trailing;
  REAIMGUIAPI_EXTERN int TabItemFlags_UnsavedDocument;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, int columns, details::optional<int> flagsInOptional, details::optional<double> outer_size_wInOptional, details::optional<double> outer_size_hInOptional, details::optional<double> inner_widthInOptional), true> BeginTable;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndTable;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx)> TableGetColumnCount;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx)> TableGetColumnIndex;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx)> TableGetRowIndex;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> TableNextColumn;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<int> row_flagsInOptional, details::optional<double> min_row_heightInOptional)> TableNextRow;
  REAIMGUIAPI_EXTERN int TableRowFlags_Headers;
  REAIMGUIAPI_EXTERN int TableRowFlags_None;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int column_n)> TableSetColumnIndex;
  REAIMGUIAPI_EXTERN int TableBgTarget_CellBg;
  REAIMGUIAPI_EXTERN int TableBgTarget_None;
  REAIMGUIAPI_EXTERN int TableBgTarget_RowBg0;
  REAIMGUIAPI_EXTERN int TableBgTarget_RowBg1;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int target, int color_rgba, details::optional<int> column_nInOptional)> TableSetBgColor;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> TableAngledHeadersRow;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx, details::optional<int> column_nInOptional)> TableGetColumnFlags;
  REAIMGUIAPI_EXTERN details::function<const char*(ImGui_Context* ctx, details::optional<int> column_nInOptional)> TableGetColumnName;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx)> TableGetHoveredColumn;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* label)> TableHeader;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> TableHeadersRow;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int column_n, bool v)> TableSetColumnEnabled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* label, details::optional<int> flagsInOptional, details::optional<double> init_width_or_weightInOptional, details::optional<int> user_idInOptional)> TableSetupColumn;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int cols, int rows)> TableSetupScrollFreeze;
  REAIMGUIAPI_EXTERN int TableColumnFlags_None;
  REAIMGUIAPI_EXTERN int TableColumnFlags_AngledHeader;
  REAIMGUIAPI_EXTERN int TableColumnFlags_DefaultHide;
  REAIMGUIAPI_EXTERN int TableColumnFlags_DefaultSort;
  REAIMGUIAPI_EXTERN int TableColumnFlags_Disabled;
  REAIMGUIAPI_EXTERN int TableColumnFlags_IndentDisable;
  REAIMGUIAPI_EXTERN int TableColumnFlags_IndentEnable;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoClip;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoHeaderLabel;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoHeaderWidth;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoHide;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoReorder;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoResize;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoSort;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoSortAscending;
  REAIMGUIAPI_EXTERN int TableColumnFlags_NoSortDescending;
  REAIMGUIAPI_EXTERN int TableColumnFlags_PreferSortAscending;
  REAIMGUIAPI_EXTERN int TableColumnFlags_PreferSortDescending;
  REAIMGUIAPI_EXTERN int TableColumnFlags_WidthFixed;
  REAIMGUIAPI_EXTERN int TableColumnFlags_WidthStretch;
  REAIMGUIAPI_EXTERN int TableColumnFlags_IsEnabled;
  REAIMGUIAPI_EXTERN int TableColumnFlags_IsHovered;
  REAIMGUIAPI_EXTERN int TableColumnFlags_IsSorted;
  REAIMGUIAPI_EXTERN int TableColumnFlags_IsVisible;
  REAIMGUIAPI_EXTERN int SortDirection_Ascending;
  REAIMGUIAPI_EXTERN int SortDirection_Descending;
  REAIMGUIAPI_EXTERN int SortDirection_None;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, int id, int* column_indexOut, int* column_user_idOut, int* sort_directionOut)> TableGetColumnSortSpecs;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, bool* has_specsOut)> TableNeedSort;
  REAIMGUIAPI_EXTERN int TableFlags_None;
  REAIMGUIAPI_EXTERN int TableFlags_NoClip;
  REAIMGUIAPI_EXTERN int TableFlags_Borders;
  REAIMGUIAPI_EXTERN int TableFlags_BordersH;
  REAIMGUIAPI_EXTERN int TableFlags_BordersInner;
  REAIMGUIAPI_EXTERN int TableFlags_BordersInnerH;
  REAIMGUIAPI_EXTERN int TableFlags_BordersInnerV;
  REAIMGUIAPI_EXTERN int TableFlags_BordersOuter;
  REAIMGUIAPI_EXTERN int TableFlags_BordersOuterH;
  REAIMGUIAPI_EXTERN int TableFlags_BordersOuterV;
  REAIMGUIAPI_EXTERN int TableFlags_BordersV;
  REAIMGUIAPI_EXTERN int TableFlags_RowBg;
  REAIMGUIAPI_EXTERN int TableFlags_ContextMenuInBody;
  REAIMGUIAPI_EXTERN int TableFlags_Hideable;
  REAIMGUIAPI_EXTERN int TableFlags_NoSavedSettings;
  REAIMGUIAPI_EXTERN int TableFlags_Reorderable;
  REAIMGUIAPI_EXTERN int TableFlags_Resizable;
  REAIMGUIAPI_EXTERN int TableFlags_Sortable;
  REAIMGUIAPI_EXTERN int TableFlags_HighlightHoveredColumn;
  REAIMGUIAPI_EXTERN int TableFlags_NoPadInnerX;
  REAIMGUIAPI_EXTERN int TableFlags_NoPadOuterX;
  REAIMGUIAPI_EXTERN int TableFlags_PadOuterX;
  REAIMGUIAPI_EXTERN int TableFlags_ScrollX;
  REAIMGUIAPI_EXTERN int TableFlags_ScrollY;
  REAIMGUIAPI_EXTERN int TableFlags_NoHostExtendX;
  REAIMGUIAPI_EXTERN int TableFlags_NoHostExtendY;
  REAIMGUIAPI_EXTERN int TableFlags_NoKeepColumnsVisible;
  REAIMGUIAPI_EXTERN int TableFlags_PreciseWidths;
  REAIMGUIAPI_EXTERN int TableFlags_SizingFixedFit;
  REAIMGUIAPI_EXTERN int TableFlags_SizingFixedSame;
  REAIMGUIAPI_EXTERN int TableFlags_SizingStretchProp;
  REAIMGUIAPI_EXTERN int TableFlags_SizingStretchSame;
  REAIMGUIAPI_EXTERN int TableFlags_SortMulti;
  REAIMGUIAPI_EXTERN int TableFlags_SortTristate;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> AlignTextToFramePadding;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> Bullet;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> BulletText;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text, double* wOut, double* hOut, details::optional<bool> hide_text_after_double_hashInOptional, details::optional<double> wrap_widthInOptional)> CalcTextSize;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> DebugTextEncoding;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetFrameHeight;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetFrameHeightWithSpacing;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetTextLineHeight;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetTextLineHeightWithSpacing;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* label, const char* text)> LabelText;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> PopTextWrapPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<double> wrap_local_pos_xInOptional)> PushTextWrapPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> Text;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int col_rgba, const char* text)> TextColored;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> TextDisabled;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> TextWrapped;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* vInOut, details::optional<double> stepInOptional, details::optional<double> step_fastInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> InputDouble;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> InputDouble2;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> InputDouble3;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> InputDouble4;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, reaper_array* values, details::optional<double> stepInOptional, details::optional<double> step_fastInOptional, details::optional<const char*> formatInOptional, details::optional<int> flagsInOptional)> InputDoubleN;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* vInOut, details::optional<int> stepInOptional, details::optional<int> step_fastInOptional, details::optional<int> flagsInOptional)> InputInt;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, details::optional<int> flagsInOptional)> InputInt2;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, details::optional<int> flagsInOptional)> InputInt3;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, details::optional<int> flagsInOptional)> InputInt4;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, details::optional<int> flagsInOptional, details::optional<ImGui_Function*> callbackInOptional)> InputText;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, details::optional<double> size_wInOptional, details::optional<double> size_hInOptional, details::optional<int> flagsInOptional, details::optional<ImGui_Function*> callbackInOptional)> InputTextMultiline;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, const char* hint, char* bufInOutNeedBig, int bufInOutNeedBig_sz, details::optional<int> flagsInOptional, details::optional<ImGui_Function*> callbackInOptional)> InputTextWithHint;
  REAIMGUIAPI_EXTERN int InputTextFlags_None;
  REAIMGUIAPI_EXTERN int InputTextFlags_CharsDecimal;
  REAIMGUIAPI_EXTERN int InputTextFlags_CharsHexadecimal;
  REAIMGUIAPI_EXTERN int InputTextFlags_CharsNoBlank;
  REAIMGUIAPI_EXTERN int InputTextFlags_CharsScientific;
  REAIMGUIAPI_EXTERN int InputTextFlags_CharsUppercase;
  REAIMGUIAPI_EXTERN int InputTextFlags_CallbackAlways;
  REAIMGUIAPI_EXTERN int InputTextFlags_CallbackCharFilter;
  REAIMGUIAPI_EXTERN int InputTextFlags_CallbackCompletion;
  REAIMGUIAPI_EXTERN int InputTextFlags_CallbackEdit;
  REAIMGUIAPI_EXTERN int InputTextFlags_CallbackHistory;
  REAIMGUIAPI_EXTERN int InputTextFlags_AllowTabInput;
  REAIMGUIAPI_EXTERN int InputTextFlags_CtrlEnterForNewLine;
  REAIMGUIAPI_EXTERN int InputTextFlags_EnterReturnsTrue;
  REAIMGUIAPI_EXTERN int InputTextFlags_EscapeClearsAll;
  REAIMGUIAPI_EXTERN int InputTextFlags_AlwaysOverwrite;
  REAIMGUIAPI_EXTERN int InputTextFlags_AutoSelectAll;
  REAIMGUIAPI_EXTERN int InputTextFlags_DisplayEmptyRefVal;
  REAIMGUIAPI_EXTERN int InputTextFlags_NoHorizontalScroll;
  REAIMGUIAPI_EXTERN int InputTextFlags_NoUndoRedo;
  REAIMGUIAPI_EXTERN int InputTextFlags_ParseEmptyRefVal;
  REAIMGUIAPI_EXTERN int InputTextFlags_Password;
  REAIMGUIAPI_EXTERN int InputTextFlags_ReadOnly;
  REAIMGUIAPI_EXTERN details::function<ImGui_TextFilter*(details::optional<const char*> default_filterInOptional), true> CreateTextFilter;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_TextFilter* filter)> TextFilter_Clear;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_TextFilter* filter, ImGui_Context* ctx, details::optional<const char*> labelInOptional, details::optional<double> widthInOptional)> TextFilter_Draw;
  REAIMGUIAPI_EXTERN details::function<const char*(ImGui_TextFilter* filter)> TextFilter_Get;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_TextFilter* filter)> TextFilter_IsActive;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_TextFilter* filter, const char* text)> TextFilter_PassFilter;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_TextFilter* filter, const char* filter_text)> TextFilter_Set;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<bool*> p_visibleInOutOptional, details::optional<int> flagsInOptional)> CollapsingHeader;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetTreeNodeToLabelSpacing;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsItemToggledOpen;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, bool is_open, details::optional<int> condInOptional)> SetNextItemOpen;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* label, details::optional<int> flagsInOptional)> TreeNode;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, const char* label, details::optional<int> flagsInOptional)> TreeNodeEx;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> TreePop;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* str_id)> TreePush;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_AllowOverlap;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_Bullet;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_CollapsingHeader;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_DefaultOpen;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_FramePadding;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_Framed;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_Leaf;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_NoAutoOpenOnLog;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_NoTreePushOnOpen;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_None;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_OpenOnArrow;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_OpenOnDoubleClick;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_Selected;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_SpanAllColumns;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_SpanAvailWidth;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_SpanFullWidth;
  REAIMGUIAPI_EXTERN int TreeNodeFlags_SpanTextWidth;
  REAIMGUIAPI_EXTERN details::function<const char*()> GetBuiltinPath;
  REAIMGUIAPI_EXTERN details::function<void(char* imgui_versionOut, int imgui_versionOut_sz, int* imgui_version_numOut, char* reaimgui_versionOut, int reaimgui_versionOut_sz)> GetVersion;
  REAIMGUIAPI_EXTERN details::function<void(double* minOut, double* maxOut)> NumericLimits_Double;
  REAIMGUIAPI_EXTERN details::function<void(double* minOut, double* maxOut)> NumericLimits_Float;
  REAIMGUIAPI_EXTERN details::function<void(int* minOut, int* maxOut)> NumericLimits_Int;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xInOut, double* yInOut, details::optional<bool> to_nativeInOptional)> PointConvertNative;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double fraction, details::optional<double> size_arg_wInOptional, details::optional<double> size_arg_hInOptional, details::optional<const char*> overlayInOptional)> ProgressBar;
  REAIMGUIAPI_EXTERN details::function<bool(void* pointer, const char* type)> ValidatePtr;
  REAIMGUIAPI_EXTERN details::function<const char*(ImGui_Context* ctx)> GetClipboardText;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> SetClipboardText;
  REAIMGUIAPI_EXTERN details::function<int(double r, double g, double b, double a)> ColorConvertDouble4ToU32;
  REAIMGUIAPI_EXTERN details::function<void(double h, double s, double v, double* rOut, double* gOut, double* bOut)> ColorConvertHSVtoRGB;
  REAIMGUIAPI_EXTERN details::function<int(int rgb)> ColorConvertNative;
  REAIMGUIAPI_EXTERN details::function<void(double r, double g, double b, double* hOut, double* sOut, double* vOut)> ColorConvertRGBtoHSV;
  REAIMGUIAPI_EXTERN details::function<void(int rgba, double* rOut, double* gOut, double* bOut, double* aOut)> ColorConvertU32ToDouble4;
  REAIMGUIAPI_EXTERN int Cond_Always;
  REAIMGUIAPI_EXTERN int Cond_Appearing;
  REAIMGUIAPI_EXTERN int Cond_FirstUseEver;
  REAIMGUIAPI_EXTERN int Cond_Once;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> PopID;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* str_id)> PushID;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> LogFinish;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* text)> LogText;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<int> auto_open_depthInOptional)> LogToClipboard;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<int> auto_open_depthInOptional, details::optional<const char*> filenameInOptional)> LogToFile;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<int> auto_open_depthInOptional)> LogToTTY;
  REAIMGUIAPI_EXTERN details::function<ImGui_Viewport*(ImGui_Context* ctx)> GetMainViewport;
  REAIMGUIAPI_EXTERN details::function<ImGui_Viewport*(ImGui_Context* ctx)> GetWindowViewport;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Viewport* viewport, double* xOut, double* yOut)> Viewport_GetCenter;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Viewport* viewport, double* xOut, double* yOut)> Viewport_GetPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Viewport* viewport, double* wOut, double* hOut)> Viewport_GetSize;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Viewport* viewport, double* xOut, double* yOut)> Viewport_GetWorkCenter;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Viewport* viewport, double* xOut, double* yOut)> Viewport_GetWorkPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Viewport* viewport, double* wOut, double* hOut)> Viewport_GetWorkSize;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* name, details::optional<bool*> p_openInOutOptional, details::optional<int> flagsInOptional), true> Begin;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> End;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, const char* str_id, details::optional<double> size_wInOptional, details::optional<double> size_hInOptional, details::optional<int> child_flagsInOptional, details::optional<int> window_flagsInOptional), true> BeginChild;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> EndChild;
  REAIMGUIAPI_EXTERN int ChildFlags_AlwaysAutoResize;
  REAIMGUIAPI_EXTERN int ChildFlags_AlwaysUseWindowPadding;
  REAIMGUIAPI_EXTERN int ChildFlags_AutoResizeX;
  REAIMGUIAPI_EXTERN int ChildFlags_AutoResizeY;
  REAIMGUIAPI_EXTERN int ChildFlags_Border;
  REAIMGUIAPI_EXTERN int ChildFlags_FrameStyle;
  REAIMGUIAPI_EXTERN int ChildFlags_NavFlattened;
  REAIMGUIAPI_EXTERN int ChildFlags_None;
  REAIMGUIAPI_EXTERN int ChildFlags_ResizeX;
  REAIMGUIAPI_EXTERN int ChildFlags_ResizeY;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetContentRegionAvail;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetContentRegionMax;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetWindowContentRegionMax;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetWindowContentRegionMin;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<bool*> p_openInOutOptional)> ShowAboutWindow;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<bool*> p_openInOutOptional)> ShowDebugLogWindow;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<bool*> p_openInOutOptional)> ShowIDStackToolWindow;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<bool*> p_openInOutOptional)> ShowMetricsWindow;
  REAIMGUIAPI_EXTERN details::function<int(ImGui_Context* ctx)> GetWindowDockID;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsWindowDocked;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, int dock_id, details::optional<int> condInOptional)> SetNextWindowDockID;
  REAIMGUIAPI_EXTERN int WindowFlags_AlwaysAutoResize;
  REAIMGUIAPI_EXTERN int WindowFlags_AlwaysHorizontalScrollbar;
  REAIMGUIAPI_EXTERN int WindowFlags_AlwaysVerticalScrollbar;
  REAIMGUIAPI_EXTERN int WindowFlags_HorizontalScrollbar;
  REAIMGUIAPI_EXTERN int WindowFlags_MenuBar;
  REAIMGUIAPI_EXTERN int WindowFlags_NoBackground;
  REAIMGUIAPI_EXTERN int WindowFlags_NoCollapse;
  REAIMGUIAPI_EXTERN int WindowFlags_NoDecoration;
  REAIMGUIAPI_EXTERN int WindowFlags_NoDocking;
  REAIMGUIAPI_EXTERN int WindowFlags_NoFocusOnAppearing;
  REAIMGUIAPI_EXTERN int WindowFlags_NoInputs;
  REAIMGUIAPI_EXTERN int WindowFlags_NoMouseInputs;
  REAIMGUIAPI_EXTERN int WindowFlags_NoMove;
  REAIMGUIAPI_EXTERN int WindowFlags_NoNav;
  REAIMGUIAPI_EXTERN int WindowFlags_NoNavFocus;
  REAIMGUIAPI_EXTERN int WindowFlags_NoNavInputs;
  REAIMGUIAPI_EXTERN int WindowFlags_NoResize;
  REAIMGUIAPI_EXTERN int WindowFlags_NoSavedSettings;
  REAIMGUIAPI_EXTERN int WindowFlags_NoScrollWithMouse;
  REAIMGUIAPI_EXTERN int WindowFlags_NoScrollbar;
  REAIMGUIAPI_EXTERN int WindowFlags_NoTitleBar;
  REAIMGUIAPI_EXTERN int WindowFlags_None;
  REAIMGUIAPI_EXTERN int WindowFlags_TopMost;
  REAIMGUIAPI_EXTERN int WindowFlags_UnsavedDocument;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetWindowDpiScale;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetWindowHeight;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* xOut, double* yOut)> GetWindowPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double* wOut, double* hOut)> GetWindowSize;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetWindowWidth;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx)> IsWindowAppearing;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, details::optional<int> flagsInOptional)> IsWindowFocused;
  REAIMGUIAPI_EXTERN details::function<bool(ImGui_Context* ctx, details::optional<int> flagsInOptional)> IsWindowHovered;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double alpha)> SetNextWindowBgAlpha;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, bool collapsed, details::optional<int> condInOptional)> SetNextWindowCollapsed;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double size_w, double size_h)> SetNextWindowContentSize;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> SetNextWindowFocus;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double pos_x, double pos_y, details::optional<int> condInOptional, details::optional<double> pivot_xInOptional, details::optional<double> pivot_yInOptional)> SetNextWindowPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double scroll_x, double scroll_y)> SetNextWindowScroll;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double size_w, double size_h, details::optional<int> condInOptional)> SetNextWindowSize;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double size_min_w, double size_min_h, double size_max_w, double size_max_h, details::optional<ImGui_Function*> custom_callbackInOptional)> SetNextWindowSizeConstraints;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, bool collapsed, details::optional<int> condInOptional)> SetWindowCollapsed;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* name, bool collapsed, details::optional<int> condInOptional)> SetWindowCollapsedEx;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx)> SetWindowFocus;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* name)> SetWindowFocusEx;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double pos_x, double pos_y, details::optional<int> condInOptional)> SetWindowPos;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* name, double pos_x, double pos_y, details::optional<int> condInOptional)> SetWindowPosEx;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double size_w, double size_h, details::optional<int> condInOptional)> SetWindowSize;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, const char* name, double size_w, double size_h, details::optional<int> condInOptional)> SetWindowSizeEx;
  REAIMGUIAPI_EXTERN int FocusedFlags_AnyWindow;
  REAIMGUIAPI_EXTERN int FocusedFlags_ChildWindows;
  REAIMGUIAPI_EXTERN int FocusedFlags_DockHierarchy;
  REAIMGUIAPI_EXTERN int FocusedFlags_NoPopupHierarchy;
  REAIMGUIAPI_EXTERN int FocusedFlags_None;
  REAIMGUIAPI_EXTERN int FocusedFlags_RootAndChildWindows;
  REAIMGUIAPI_EXTERN int FocusedFlags_RootWindow;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetScrollMaxX;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetScrollMaxY;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetScrollX;
  REAIMGUIAPI_EXTERN details::function<double(ImGui_Context* ctx)> GetScrollY;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double local_x, details::optional<double> center_x_ratioInOptional)> SetScrollFromPosX;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double local_y, details::optional<double> center_y_ratioInOptional)> SetScrollFromPosY;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<double> center_x_ratioInOptional)> SetScrollHereX;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, details::optional<double> center_y_ratioInOptional)> SetScrollHereY;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double scroll_x)> SetScrollX;
  REAIMGUIAPI_EXTERN details::function<void(ImGui_Context* ctx, double scroll_y)> SetScrollY;
}

#undef REAIMGUIAPI_EXTERN

#ifdef REAIMGUIAPI_IMPLEMENT
void ImGui::init(void *(*plugin_getapi)(const char *))
{
  void *(*get_func)(const char *v, const char *n) noexcept = reinterpret_cast<decltype(get_func)>(plugin_getapi("ImGui__getapi"));
  details::last_error = reinterpret_cast<decltype(details::last_error)>(plugin_getapi("ImGui__geterr"));
  if(!get_func || !details::last_error)
    throw ImGui_Error { "ReaImGui is not installed or too old" };

  ArrowButton = get_func(version, "ArrowButton"); details::check_error();
  Button = get_func(version, "Button"); details::check_error();
  Checkbox = get_func(version, "Checkbox"); details::check_error();
  CheckboxFlags = get_func(version, "CheckboxFlags"); details::check_error();
  InvisibleButton = get_func(version, "InvisibleButton"); details::check_error();
  PopButtonRepeat = get_func(version, "PopButtonRepeat"); details::check_error();
  PushButtonRepeat = get_func(version, "PushButtonRepeat"); details::check_error();
  RadioButton = get_func(version, "RadioButton"); details::check_error();
  RadioButtonEx = get_func(version, "RadioButtonEx"); details::check_error();
  SmallButton = get_func(version, "SmallButton"); details::check_error();
  Dir_Down = details::get_enum(get_func(version, "Dir_Down")); details::check_error();
  Dir_Left = details::get_enum(get_func(version, "Dir_Left")); details::check_error();
  Dir_None = details::get_enum(get_func(version, "Dir_None")); details::check_error();
  Dir_Right = details::get_enum(get_func(version, "Dir_Right")); details::check_error();
  Dir_Up = details::get_enum(get_func(version, "Dir_Up")); details::check_error();
  ButtonFlags_MouseButtonLeft = details::get_enum(get_func(version, "ButtonFlags_MouseButtonLeft")); details::check_error();
  ButtonFlags_MouseButtonMiddle = details::get_enum(get_func(version, "ButtonFlags_MouseButtonMiddle")); details::check_error();
  ButtonFlags_MouseButtonRight = details::get_enum(get_func(version, "ButtonFlags_MouseButtonRight")); details::check_error();
  ButtonFlags_None = details::get_enum(get_func(version, "ButtonFlags_None")); details::check_error();
  ColorButton = get_func(version, "ColorButton"); details::check_error();
  ColorEdit3 = get_func(version, "ColorEdit3"); details::check_error();
  ColorEdit4 = get_func(version, "ColorEdit4"); details::check_error();
  ColorPicker3 = get_func(version, "ColorPicker3"); details::check_error();
  ColorPicker4 = get_func(version, "ColorPicker4"); details::check_error();
  SetColorEditOptions = get_func(version, "SetColorEditOptions"); details::check_error();
  ColorEditFlags_NoAlpha = details::get_enum(get_func(version, "ColorEditFlags_NoAlpha")); details::check_error();
  ColorEditFlags_NoBorder = details::get_enum(get_func(version, "ColorEditFlags_NoBorder")); details::check_error();
  ColorEditFlags_NoDragDrop = details::get_enum(get_func(version, "ColorEditFlags_NoDragDrop")); details::check_error();
  ColorEditFlags_NoInputs = details::get_enum(get_func(version, "ColorEditFlags_NoInputs")); details::check_error();
  ColorEditFlags_NoLabel = details::get_enum(get_func(version, "ColorEditFlags_NoLabel")); details::check_error();
  ColorEditFlags_NoOptions = details::get_enum(get_func(version, "ColorEditFlags_NoOptions")); details::check_error();
  ColorEditFlags_NoPicker = details::get_enum(get_func(version, "ColorEditFlags_NoPicker")); details::check_error();
  ColorEditFlags_NoSidePreview = details::get_enum(get_func(version, "ColorEditFlags_NoSidePreview")); details::check_error();
  ColorEditFlags_NoSmallPreview = details::get_enum(get_func(version, "ColorEditFlags_NoSmallPreview")); details::check_error();
  ColorEditFlags_NoTooltip = details::get_enum(get_func(version, "ColorEditFlags_NoTooltip")); details::check_error();
  ColorEditFlags_None = details::get_enum(get_func(version, "ColorEditFlags_None")); details::check_error();
  ColorEditFlags_AlphaBar = details::get_enum(get_func(version, "ColorEditFlags_AlphaBar")); details::check_error();
  ColorEditFlags_AlphaPreview = details::get_enum(get_func(version, "ColorEditFlags_AlphaPreview")); details::check_error();
  ColorEditFlags_AlphaPreviewHalf = details::get_enum(get_func(version, "ColorEditFlags_AlphaPreviewHalf")); details::check_error();
  ColorEditFlags_DisplayHSV = details::get_enum(get_func(version, "ColorEditFlags_DisplayHSV")); details::check_error();
  ColorEditFlags_DisplayHex = details::get_enum(get_func(version, "ColorEditFlags_DisplayHex")); details::check_error();
  ColorEditFlags_DisplayRGB = details::get_enum(get_func(version, "ColorEditFlags_DisplayRGB")); details::check_error();
  ColorEditFlags_Float = details::get_enum(get_func(version, "ColorEditFlags_Float")); details::check_error();
  ColorEditFlags_InputHSV = details::get_enum(get_func(version, "ColorEditFlags_InputHSV")); details::check_error();
  ColorEditFlags_InputRGB = details::get_enum(get_func(version, "ColorEditFlags_InputRGB")); details::check_error();
  ColorEditFlags_PickerHueBar = details::get_enum(get_func(version, "ColorEditFlags_PickerHueBar")); details::check_error();
  ColorEditFlags_PickerHueWheel = details::get_enum(get_func(version, "ColorEditFlags_PickerHueWheel")); details::check_error();
  ColorEditFlags_Uint8 = details::get_enum(get_func(version, "ColorEditFlags_Uint8")); details::check_error();
  BeginCombo = get_func(version, "BeginCombo"); details::check_error();
  Combo = get_func(version, "Combo"); details::check_error();
  ComboFlags_HeightLarge = details::get_enum(get_func(version, "ComboFlags_HeightLarge")); details::check_error();
  ComboFlags_HeightLargest = details::get_enum(get_func(version, "ComboFlags_HeightLargest")); details::check_error();
  ComboFlags_HeightRegular = details::get_enum(get_func(version, "ComboFlags_HeightRegular")); details::check_error();
  ComboFlags_HeightSmall = details::get_enum(get_func(version, "ComboFlags_HeightSmall")); details::check_error();
  ComboFlags_NoArrowButton = details::get_enum(get_func(version, "ComboFlags_NoArrowButton")); details::check_error();
  ComboFlags_NoPreview = details::get_enum(get_func(version, "ComboFlags_NoPreview")); details::check_error();
  ComboFlags_None = details::get_enum(get_func(version, "ComboFlags_None")); details::check_error();
  ComboFlags_PopupAlignLeft = details::get_enum(get_func(version, "ComboFlags_PopupAlignLeft")); details::check_error();
  ComboFlags_WidthFitPreview = details::get_enum(get_func(version, "ComboFlags_WidthFitPreview")); details::check_error();
  EndCombo = get_func(version, "EndCombo"); details::check_error();
  BeginListBox = get_func(version, "BeginListBox"); details::check_error();
  EndListBox = get_func(version, "EndListBox"); details::check_error();
  ListBox = get_func(version, "ListBox"); details::check_error();
  Selectable = get_func(version, "Selectable"); details::check_error();
  SelectableFlags_AllowDoubleClick = details::get_enum(get_func(version, "SelectableFlags_AllowDoubleClick")); details::check_error();
  SelectableFlags_AllowOverlap = details::get_enum(get_func(version, "SelectableFlags_AllowOverlap")); details::check_error();
  SelectableFlags_Disabled = details::get_enum(get_func(version, "SelectableFlags_Disabled")); details::check_error();
  SelectableFlags_DontClosePopups = details::get_enum(get_func(version, "SelectableFlags_DontClosePopups")); details::check_error();
  SelectableFlags_None = details::get_enum(get_func(version, "SelectableFlags_None")); details::check_error();
  SelectableFlags_SpanAllColumns = details::get_enum(get_func(version, "SelectableFlags_SpanAllColumns")); details::check_error();
  Attach = get_func(version, "Attach"); details::check_error();
  CreateContext = get_func(version, "CreateContext"); details::check_error();
  Detach = get_func(version, "Detach"); details::check_error();
  GetDeltaTime = get_func(version, "GetDeltaTime"); details::check_error();
  GetFrameCount = get_func(version, "GetFrameCount"); details::check_error();
  GetFramerate = get_func(version, "GetFramerate"); details::check_error();
  GetTime = get_func(version, "GetTime"); details::check_error();
  ConfigFlags_DockingEnable = details::get_enum(get_func(version, "ConfigFlags_DockingEnable")); details::check_error();
  ConfigFlags_NavEnableKeyboard = details::get_enum(get_func(version, "ConfigFlags_NavEnableKeyboard")); details::check_error();
  ConfigFlags_NavEnableSetMousePos = details::get_enum(get_func(version, "ConfigFlags_NavEnableSetMousePos")); details::check_error();
  ConfigFlags_NavNoCaptureKeyboard = details::get_enum(get_func(version, "ConfigFlags_NavNoCaptureKeyboard")); details::check_error();
  ConfigFlags_NoKeyboard = details::get_enum(get_func(version, "ConfigFlags_NoKeyboard")); details::check_error();
  ConfigFlags_NoMouse = details::get_enum(get_func(version, "ConfigFlags_NoMouse")); details::check_error();
  ConfigFlags_NoMouseCursorChange = details::get_enum(get_func(version, "ConfigFlags_NoMouseCursorChange")); details::check_error();
  ConfigFlags_NoSavedSettings = details::get_enum(get_func(version, "ConfigFlags_NoSavedSettings")); details::check_error();
  ConfigFlags_None = details::get_enum(get_func(version, "ConfigFlags_None")); details::check_error();
  ConfigVar_DebugBeginReturnValueLoop = details::get_enum(get_func(version, "ConfigVar_DebugBeginReturnValueLoop")); details::check_error();
  ConfigVar_DebugBeginReturnValueOnce = details::get_enum(get_func(version, "ConfigVar_DebugBeginReturnValueOnce")); details::check_error();
  ConfigVar_DockingNoSplit = details::get_enum(get_func(version, "ConfigVar_DockingNoSplit")); details::check_error();
  ConfigVar_DockingTransparentPayload = details::get_enum(get_func(version, "ConfigVar_DockingTransparentPayload")); details::check_error();
  ConfigVar_DockingWithShift = details::get_enum(get_func(version, "ConfigVar_DockingWithShift")); details::check_error();
  ConfigVar_DragClickToInputText = details::get_enum(get_func(version, "ConfigVar_DragClickToInputText")); details::check_error();
  ConfigVar_Flags = details::get_enum(get_func(version, "ConfigVar_Flags")); details::check_error();
  ConfigVar_HoverDelayNormal = details::get_enum(get_func(version, "ConfigVar_HoverDelayNormal")); details::check_error();
  ConfigVar_HoverDelayShort = details::get_enum(get_func(version, "ConfigVar_HoverDelayShort")); details::check_error();
  ConfigVar_HoverFlagsForTooltipMouse = details::get_enum(get_func(version, "ConfigVar_HoverFlagsForTooltipMouse")); details::check_error();
  ConfigVar_HoverFlagsForTooltipNav = details::get_enum(get_func(version, "ConfigVar_HoverFlagsForTooltipNav")); details::check_error();
  ConfigVar_HoverStationaryDelay = details::get_enum(get_func(version, "ConfigVar_HoverStationaryDelay")); details::check_error();
  ConfigVar_InputTextCursorBlink = details::get_enum(get_func(version, "ConfigVar_InputTextCursorBlink")); details::check_error();
  ConfigVar_InputTextEnterKeepActive = details::get_enum(get_func(version, "ConfigVar_InputTextEnterKeepActive")); details::check_error();
  ConfigVar_InputTrickleEventQueue = details::get_enum(get_func(version, "ConfigVar_InputTrickleEventQueue")); details::check_error();
  ConfigVar_KeyRepeatDelay = details::get_enum(get_func(version, "ConfigVar_KeyRepeatDelay")); details::check_error();
  ConfigVar_KeyRepeatRate = details::get_enum(get_func(version, "ConfigVar_KeyRepeatRate")); details::check_error();
  ConfigVar_MacOSXBehaviors = details::get_enum(get_func(version, "ConfigVar_MacOSXBehaviors")); details::check_error();
  ConfigVar_MouseDoubleClickMaxDist = details::get_enum(get_func(version, "ConfigVar_MouseDoubleClickMaxDist")); details::check_error();
  ConfigVar_MouseDoubleClickTime = details::get_enum(get_func(version, "ConfigVar_MouseDoubleClickTime")); details::check_error();
  ConfigVar_MouseDragThreshold = details::get_enum(get_func(version, "ConfigVar_MouseDragThreshold")); details::check_error();
  ConfigVar_ViewportsNoDecoration = details::get_enum(get_func(version, "ConfigVar_ViewportsNoDecoration")); details::check_error();
  ConfigVar_WindowsMoveFromTitleBarOnly = details::get_enum(get_func(version, "ConfigVar_WindowsMoveFromTitleBarOnly")); details::check_error();
  ConfigVar_WindowsResizeFromEdges = details::get_enum(get_func(version, "ConfigVar_WindowsResizeFromEdges")); details::check_error();
  GetConfigVar = get_func(version, "GetConfigVar"); details::check_error();
  SetConfigVar = get_func(version, "SetConfigVar"); details::check_error();
  AcceptDragDropPayload = get_func(version, "AcceptDragDropPayload"); details::check_error();
  AcceptDragDropPayloadFiles = get_func(version, "AcceptDragDropPayloadFiles"); details::check_error();
  AcceptDragDropPayloadRGB = get_func(version, "AcceptDragDropPayloadRGB"); details::check_error();
  AcceptDragDropPayloadRGBA = get_func(version, "AcceptDragDropPayloadRGBA"); details::check_error();
  BeginDragDropSource = get_func(version, "BeginDragDropSource"); details::check_error();
  BeginDragDropTarget = get_func(version, "BeginDragDropTarget"); details::check_error();
  EndDragDropSource = get_func(version, "EndDragDropSource"); details::check_error();
  EndDragDropTarget = get_func(version, "EndDragDropTarget"); details::check_error();
  GetDragDropPayload = get_func(version, "GetDragDropPayload"); details::check_error();
  GetDragDropPayloadFile = get_func(version, "GetDragDropPayloadFile"); details::check_error();
  SetDragDropPayload = get_func(version, "SetDragDropPayload"); details::check_error();
  DragDropFlags_None = details::get_enum(get_func(version, "DragDropFlags_None")); details::check_error();
  DragDropFlags_AcceptBeforeDelivery = details::get_enum(get_func(version, "DragDropFlags_AcceptBeforeDelivery")); details::check_error();
  DragDropFlags_AcceptNoDrawDefaultRect = details::get_enum(get_func(version, "DragDropFlags_AcceptNoDrawDefaultRect")); details::check_error();
  DragDropFlags_AcceptNoPreviewTooltip = details::get_enum(get_func(version, "DragDropFlags_AcceptNoPreviewTooltip")); details::check_error();
  DragDropFlags_AcceptPeekOnly = details::get_enum(get_func(version, "DragDropFlags_AcceptPeekOnly")); details::check_error();
  DragDropFlags_PayloadAutoExpire = details::get_enum(get_func(version, "DragDropFlags_PayloadAutoExpire")); details::check_error();
  DragDropFlags_SourceAllowNullID = details::get_enum(get_func(version, "DragDropFlags_SourceAllowNullID")); details::check_error();
  DragDropFlags_SourceExtern = details::get_enum(get_func(version, "DragDropFlags_SourceExtern")); details::check_error();
  DragDropFlags_SourceNoDisableHover = details::get_enum(get_func(version, "DragDropFlags_SourceNoDisableHover")); details::check_error();
  DragDropFlags_SourceNoHoldToOpenOthers = details::get_enum(get_func(version, "DragDropFlags_SourceNoHoldToOpenOthers")); details::check_error();
  DragDropFlags_SourceNoPreviewTooltip = details::get_enum(get_func(version, "DragDropFlags_SourceNoPreviewTooltip")); details::check_error();
  DragDouble = get_func(version, "DragDouble"); details::check_error();
  DragDouble2 = get_func(version, "DragDouble2"); details::check_error();
  DragDouble3 = get_func(version, "DragDouble3"); details::check_error();
  DragDouble4 = get_func(version, "DragDouble4"); details::check_error();
  DragDoubleN = get_func(version, "DragDoubleN"); details::check_error();
  DragFloatRange2 = get_func(version, "DragFloatRange2"); details::check_error();
  DragInt = get_func(version, "DragInt"); details::check_error();
  DragInt2 = get_func(version, "DragInt2"); details::check_error();
  DragInt3 = get_func(version, "DragInt3"); details::check_error();
  DragInt4 = get_func(version, "DragInt4"); details::check_error();
  DragIntRange2 = get_func(version, "DragIntRange2"); details::check_error();
  SliderFlags_AlwaysClamp = details::get_enum(get_func(version, "SliderFlags_AlwaysClamp")); details::check_error();
  SliderFlags_Logarithmic = details::get_enum(get_func(version, "SliderFlags_Logarithmic")); details::check_error();
  SliderFlags_NoInput = details::get_enum(get_func(version, "SliderFlags_NoInput")); details::check_error();
  SliderFlags_NoRoundToFormat = details::get_enum(get_func(version, "SliderFlags_NoRoundToFormat")); details::check_error();
  SliderFlags_None = details::get_enum(get_func(version, "SliderFlags_None")); details::check_error();
  SliderFlags_WrapAround = details::get_enum(get_func(version, "SliderFlags_WrapAround")); details::check_error();
  SliderAngle = get_func(version, "SliderAngle"); details::check_error();
  SliderDouble = get_func(version, "SliderDouble"); details::check_error();
  SliderDouble2 = get_func(version, "SliderDouble2"); details::check_error();
  SliderDouble3 = get_func(version, "SliderDouble3"); details::check_error();
  SliderDouble4 = get_func(version, "SliderDouble4"); details::check_error();
  SliderDoubleN = get_func(version, "SliderDoubleN"); details::check_error();
  SliderInt = get_func(version, "SliderInt"); details::check_error();
  SliderInt2 = get_func(version, "SliderInt2"); details::check_error();
  SliderInt3 = get_func(version, "SliderInt3"); details::check_error();
  SliderInt4 = get_func(version, "SliderInt4"); details::check_error();
  VSliderDouble = get_func(version, "VSliderDouble"); details::check_error();
  VSliderInt = get_func(version, "VSliderInt"); details::check_error();
  DrawFlags_Closed = details::get_enum(get_func(version, "DrawFlags_Closed")); details::check_error();
  DrawFlags_None = details::get_enum(get_func(version, "DrawFlags_None")); details::check_error();
  DrawFlags_RoundCornersAll = details::get_enum(get_func(version, "DrawFlags_RoundCornersAll")); details::check_error();
  DrawFlags_RoundCornersBottom = details::get_enum(get_func(version, "DrawFlags_RoundCornersBottom")); details::check_error();
  DrawFlags_RoundCornersBottomLeft = details::get_enum(get_func(version, "DrawFlags_RoundCornersBottomLeft")); details::check_error();
  DrawFlags_RoundCornersBottomRight = details::get_enum(get_func(version, "DrawFlags_RoundCornersBottomRight")); details::check_error();
  DrawFlags_RoundCornersLeft = details::get_enum(get_func(version, "DrawFlags_RoundCornersLeft")); details::check_error();
  DrawFlags_RoundCornersNone = details::get_enum(get_func(version, "DrawFlags_RoundCornersNone")); details::check_error();
  DrawFlags_RoundCornersRight = details::get_enum(get_func(version, "DrawFlags_RoundCornersRight")); details::check_error();
  DrawFlags_RoundCornersTop = details::get_enum(get_func(version, "DrawFlags_RoundCornersTop")); details::check_error();
  DrawFlags_RoundCornersTopLeft = details::get_enum(get_func(version, "DrawFlags_RoundCornersTopLeft")); details::check_error();
  DrawFlags_RoundCornersTopRight = details::get_enum(get_func(version, "DrawFlags_RoundCornersTopRight")); details::check_error();
  DrawList_PopClipRect = get_func(version, "DrawList_PopClipRect"); details::check_error();
  DrawList_PushClipRect = get_func(version, "DrawList_PushClipRect"); details::check_error();
  DrawList_PushClipRectFullScreen = get_func(version, "DrawList_PushClipRectFullScreen"); details::check_error();
  GetBackgroundDrawList = get_func(version, "GetBackgroundDrawList"); details::check_error();
  GetForegroundDrawList = get_func(version, "GetForegroundDrawList"); details::check_error();
  GetWindowDrawList = get_func(version, "GetWindowDrawList"); details::check_error();
  DrawList_AddBezierCubic = get_func(version, "DrawList_AddBezierCubic"); details::check_error();
  DrawList_AddBezierQuadratic = get_func(version, "DrawList_AddBezierQuadratic"); details::check_error();
  DrawList_AddCircle = get_func(version, "DrawList_AddCircle"); details::check_error();
  DrawList_AddCircleFilled = get_func(version, "DrawList_AddCircleFilled"); details::check_error();
  DrawList_AddConcavePolyFilled = get_func(version, "DrawList_AddConcavePolyFilled"); details::check_error();
  DrawList_AddConvexPolyFilled = get_func(version, "DrawList_AddConvexPolyFilled"); details::check_error();
  DrawList_AddEllipse = get_func(version, "DrawList_AddEllipse"); details::check_error();
  DrawList_AddEllipseFilled = get_func(version, "DrawList_AddEllipseFilled"); details::check_error();
  DrawList_AddImage = get_func(version, "DrawList_AddImage"); details::check_error();
  DrawList_AddImageQuad = get_func(version, "DrawList_AddImageQuad"); details::check_error();
  DrawList_AddImageRounded = get_func(version, "DrawList_AddImageRounded"); details::check_error();
  DrawList_AddLine = get_func(version, "DrawList_AddLine"); details::check_error();
  DrawList_AddNgon = get_func(version, "DrawList_AddNgon"); details::check_error();
  DrawList_AddNgonFilled = get_func(version, "DrawList_AddNgonFilled"); details::check_error();
  DrawList_AddPolyline = get_func(version, "DrawList_AddPolyline"); details::check_error();
  DrawList_AddQuad = get_func(version, "DrawList_AddQuad"); details::check_error();
  DrawList_AddQuadFilled = get_func(version, "DrawList_AddQuadFilled"); details::check_error();
  DrawList_AddRect = get_func(version, "DrawList_AddRect"); details::check_error();
  DrawList_AddRectFilled = get_func(version, "DrawList_AddRectFilled"); details::check_error();
  DrawList_AddRectFilledMultiColor = get_func(version, "DrawList_AddRectFilledMultiColor"); details::check_error();
  DrawList_AddText = get_func(version, "DrawList_AddText"); details::check_error();
  DrawList_AddTextEx = get_func(version, "DrawList_AddTextEx"); details::check_error();
  DrawList_AddTriangle = get_func(version, "DrawList_AddTriangle"); details::check_error();
  DrawList_AddTriangleFilled = get_func(version, "DrawList_AddTriangleFilled"); details::check_error();
  CreateDrawListSplitter = get_func(version, "CreateDrawListSplitter"); details::check_error();
  DrawListSplitter_Clear = get_func(version, "DrawListSplitter_Clear"); details::check_error();
  DrawListSplitter_Merge = get_func(version, "DrawListSplitter_Merge"); details::check_error();
  DrawListSplitter_SetCurrentChannel = get_func(version, "DrawListSplitter_SetCurrentChannel"); details::check_error();
  DrawListSplitter_Split = get_func(version, "DrawListSplitter_Split"); details::check_error();
  DrawList_PathArcTo = get_func(version, "DrawList_PathArcTo"); details::check_error();
  DrawList_PathArcToFast = get_func(version, "DrawList_PathArcToFast"); details::check_error();
  DrawList_PathBezierCubicCurveTo = get_func(version, "DrawList_PathBezierCubicCurveTo"); details::check_error();
  DrawList_PathBezierQuadraticCurveTo = get_func(version, "DrawList_PathBezierQuadraticCurveTo"); details::check_error();
  DrawList_PathClear = get_func(version, "DrawList_PathClear"); details::check_error();
  DrawList_PathEllipticalArcTo = get_func(version, "DrawList_PathEllipticalArcTo"); details::check_error();
  DrawList_PathFillConcave = get_func(version, "DrawList_PathFillConcave"); details::check_error();
  DrawList_PathFillConvex = get_func(version, "DrawList_PathFillConvex"); details::check_error();
  DrawList_PathLineTo = get_func(version, "DrawList_PathLineTo"); details::check_error();
  DrawList_PathRect = get_func(version, "DrawList_PathRect"); details::check_error();
  DrawList_PathStroke = get_func(version, "DrawList_PathStroke"); details::check_error();
  CreateFont = get_func(version, "CreateFont"); details::check_error();
  CreateFontFromMem = get_func(version, "CreateFontFromMem"); details::check_error();
  FontFlags_Bold = details::get_enum(get_func(version, "FontFlags_Bold")); details::check_error();
  FontFlags_Italic = details::get_enum(get_func(version, "FontFlags_Italic")); details::check_error();
  FontFlags_None = details::get_enum(get_func(version, "FontFlags_None")); details::check_error();
  GetFont = get_func(version, "GetFont"); details::check_error();
  GetFontSize = get_func(version, "GetFontSize"); details::check_error();
  PopFont = get_func(version, "PopFont"); details::check_error();
  PushFont = get_func(version, "PushFont"); details::check_error();
  CreateFunctionFromEEL = get_func(version, "CreateFunctionFromEEL"); details::check_error();
  Function_Execute = get_func(version, "Function_Execute"); details::check_error();
  Function_GetValue = get_func(version, "Function_GetValue"); details::check_error();
  Function_GetValue_Array = get_func(version, "Function_GetValue_Array"); details::check_error();
  Function_GetValue_String = get_func(version, "Function_GetValue_String"); details::check_error();
  Function_SetValue = get_func(version, "Function_SetValue"); details::check_error();
  Function_SetValue_Array = get_func(version, "Function_SetValue_Array"); details::check_error();
  Function_SetValue_String = get_func(version, "Function_SetValue_String"); details::check_error();
  CreateImage = get_func(version, "CreateImage"); details::check_error();
  CreateImageFromLICE = get_func(version, "CreateImageFromLICE"); details::check_error();
  CreateImageFromMem = get_func(version, "CreateImageFromMem"); details::check_error();
  Image = get_func(version, "Image"); details::check_error();
  ImageButton = get_func(version, "ImageButton"); details::check_error();
  Image_GetSize = get_func(version, "Image_GetSize"); details::check_error();
  CreateImageSet = get_func(version, "CreateImageSet"); details::check_error();
  ImageSet_Add = get_func(version, "ImageSet_Add"); details::check_error();
  BeginDisabled = get_func(version, "BeginDisabled"); details::check_error();
  DebugStartItemPicker = get_func(version, "DebugStartItemPicker"); details::check_error();
  EndDisabled = get_func(version, "EndDisabled"); details::check_error();
  SetNextItemAllowOverlap = get_func(version, "SetNextItemAllowOverlap"); details::check_error();
  CalcItemWidth = get_func(version, "CalcItemWidth"); details::check_error();
  GetItemRectMax = get_func(version, "GetItemRectMax"); details::check_error();
  GetItemRectMin = get_func(version, "GetItemRectMin"); details::check_error();
  GetItemRectSize = get_func(version, "GetItemRectSize"); details::check_error();
  PopItemWidth = get_func(version, "PopItemWidth"); details::check_error();
  PushItemWidth = get_func(version, "PushItemWidth"); details::check_error();
  SetNextItemWidth = get_func(version, "SetNextItemWidth"); details::check_error();
  PopTabStop = get_func(version, "PopTabStop"); details::check_error();
  PushTabStop = get_func(version, "PushTabStop"); details::check_error();
  SetItemDefaultFocus = get_func(version, "SetItemDefaultFocus"); details::check_error();
  SetKeyboardFocusHere = get_func(version, "SetKeyboardFocusHere"); details::check_error();
  HoveredFlags_AllowWhenBlockedByActiveItem = details::get_enum(get_func(version, "HoveredFlags_AllowWhenBlockedByActiveItem")); details::check_error();
  HoveredFlags_AllowWhenBlockedByPopup = details::get_enum(get_func(version, "HoveredFlags_AllowWhenBlockedByPopup")); details::check_error();
  HoveredFlags_ForTooltip = details::get_enum(get_func(version, "HoveredFlags_ForTooltip")); details::check_error();
  HoveredFlags_NoNavOverride = details::get_enum(get_func(version, "HoveredFlags_NoNavOverride")); details::check_error();
  HoveredFlags_None = details::get_enum(get_func(version, "HoveredFlags_None")); details::check_error();
  HoveredFlags_Stationary = details::get_enum(get_func(version, "HoveredFlags_Stationary")); details::check_error();
  HoveredFlags_AllowWhenDisabled = details::get_enum(get_func(version, "HoveredFlags_AllowWhenDisabled")); details::check_error();
  HoveredFlags_AllowWhenOverlapped = details::get_enum(get_func(version, "HoveredFlags_AllowWhenOverlapped")); details::check_error();
  HoveredFlags_AllowWhenOverlappedByItem = details::get_enum(get_func(version, "HoveredFlags_AllowWhenOverlappedByItem")); details::check_error();
  HoveredFlags_AllowWhenOverlappedByWindow = details::get_enum(get_func(version, "HoveredFlags_AllowWhenOverlappedByWindow")); details::check_error();
  HoveredFlags_RectOnly = details::get_enum(get_func(version, "HoveredFlags_RectOnly")); details::check_error();
  HoveredFlags_DelayNone = details::get_enum(get_func(version, "HoveredFlags_DelayNone")); details::check_error();
  HoveredFlags_DelayNormal = details::get_enum(get_func(version, "HoveredFlags_DelayNormal")); details::check_error();
  HoveredFlags_DelayShort = details::get_enum(get_func(version, "HoveredFlags_DelayShort")); details::check_error();
  HoveredFlags_NoSharedDelay = details::get_enum(get_func(version, "HoveredFlags_NoSharedDelay")); details::check_error();
  HoveredFlags_AnyWindow = details::get_enum(get_func(version, "HoveredFlags_AnyWindow")); details::check_error();
  HoveredFlags_ChildWindows = details::get_enum(get_func(version, "HoveredFlags_ChildWindows")); details::check_error();
  HoveredFlags_DockHierarchy = details::get_enum(get_func(version, "HoveredFlags_DockHierarchy")); details::check_error();
  HoveredFlags_NoPopupHierarchy = details::get_enum(get_func(version, "HoveredFlags_NoPopupHierarchy")); details::check_error();
  HoveredFlags_RootAndChildWindows = details::get_enum(get_func(version, "HoveredFlags_RootAndChildWindows")); details::check_error();
  HoveredFlags_RootWindow = details::get_enum(get_func(version, "HoveredFlags_RootWindow")); details::check_error();
  IsAnyItemActive = get_func(version, "IsAnyItemActive"); details::check_error();
  IsAnyItemFocused = get_func(version, "IsAnyItemFocused"); details::check_error();
  IsAnyItemHovered = get_func(version, "IsAnyItemHovered"); details::check_error();
  IsItemActivated = get_func(version, "IsItemActivated"); details::check_error();
  IsItemActive = get_func(version, "IsItemActive"); details::check_error();
  IsItemClicked = get_func(version, "IsItemClicked"); details::check_error();
  IsItemDeactivated = get_func(version, "IsItemDeactivated"); details::check_error();
  IsItemDeactivatedAfterEdit = get_func(version, "IsItemDeactivatedAfterEdit"); details::check_error();
  IsItemEdited = get_func(version, "IsItemEdited"); details::check_error();
  IsItemFocused = get_func(version, "IsItemFocused"); details::check_error();
  IsItemHovered = get_func(version, "IsItemHovered"); details::check_error();
  IsItemVisible = get_func(version, "IsItemVisible"); details::check_error();
  GetInputQueueCharacter = get_func(version, "GetInputQueueCharacter"); details::check_error();
  GetKeyDownDuration = get_func(version, "GetKeyDownDuration"); details::check_error();
  GetKeyMods = get_func(version, "GetKeyMods"); details::check_error();
  GetKeyPressedAmount = get_func(version, "GetKeyPressedAmount"); details::check_error();
  IsKeyDown = get_func(version, "IsKeyDown"); details::check_error();
  IsKeyPressed = get_func(version, "IsKeyPressed"); details::check_error();
  IsKeyReleased = get_func(version, "IsKeyReleased"); details::check_error();
  SetNextFrameWantCaptureKeyboard = get_func(version, "SetNextFrameWantCaptureKeyboard"); details::check_error();
  Key_0 = details::get_enum(get_func(version, "Key_0")); details::check_error();
  Key_1 = details::get_enum(get_func(version, "Key_1")); details::check_error();
  Key_2 = details::get_enum(get_func(version, "Key_2")); details::check_error();
  Key_3 = details::get_enum(get_func(version, "Key_3")); details::check_error();
  Key_4 = details::get_enum(get_func(version, "Key_4")); details::check_error();
  Key_5 = details::get_enum(get_func(version, "Key_5")); details::check_error();
  Key_6 = details::get_enum(get_func(version, "Key_6")); details::check_error();
  Key_7 = details::get_enum(get_func(version, "Key_7")); details::check_error();
  Key_8 = details::get_enum(get_func(version, "Key_8")); details::check_error();
  Key_9 = details::get_enum(get_func(version, "Key_9")); details::check_error();
  Key_A = details::get_enum(get_func(version, "Key_A")); details::check_error();
  Key_Apostrophe = details::get_enum(get_func(version, "Key_Apostrophe")); details::check_error();
  Key_AppBack = details::get_enum(get_func(version, "Key_AppBack")); details::check_error();
  Key_AppForward = details::get_enum(get_func(version, "Key_AppForward")); details::check_error();
  Key_B = details::get_enum(get_func(version, "Key_B")); details::check_error();
  Key_Backslash = details::get_enum(get_func(version, "Key_Backslash")); details::check_error();
  Key_Backspace = details::get_enum(get_func(version, "Key_Backspace")); details::check_error();
  Key_C = details::get_enum(get_func(version, "Key_C")); details::check_error();
  Key_CapsLock = details::get_enum(get_func(version, "Key_CapsLock")); details::check_error();
  Key_Comma = details::get_enum(get_func(version, "Key_Comma")); details::check_error();
  Key_D = details::get_enum(get_func(version, "Key_D")); details::check_error();
  Key_Delete = details::get_enum(get_func(version, "Key_Delete")); details::check_error();
  Key_DownArrow = details::get_enum(get_func(version, "Key_DownArrow")); details::check_error();
  Key_E = details::get_enum(get_func(version, "Key_E")); details::check_error();
  Key_End = details::get_enum(get_func(version, "Key_End")); details::check_error();
  Key_Enter = details::get_enum(get_func(version, "Key_Enter")); details::check_error();
  Key_Equal = details::get_enum(get_func(version, "Key_Equal")); details::check_error();
  Key_Escape = details::get_enum(get_func(version, "Key_Escape")); details::check_error();
  Key_F = details::get_enum(get_func(version, "Key_F")); details::check_error();
  Key_F1 = details::get_enum(get_func(version, "Key_F1")); details::check_error();
  Key_F10 = details::get_enum(get_func(version, "Key_F10")); details::check_error();
  Key_F11 = details::get_enum(get_func(version, "Key_F11")); details::check_error();
  Key_F12 = details::get_enum(get_func(version, "Key_F12")); details::check_error();
  Key_F13 = details::get_enum(get_func(version, "Key_F13")); details::check_error();
  Key_F14 = details::get_enum(get_func(version, "Key_F14")); details::check_error();
  Key_F15 = details::get_enum(get_func(version, "Key_F15")); details::check_error();
  Key_F16 = details::get_enum(get_func(version, "Key_F16")); details::check_error();
  Key_F17 = details::get_enum(get_func(version, "Key_F17")); details::check_error();
  Key_F18 = details::get_enum(get_func(version, "Key_F18")); details::check_error();
  Key_F19 = details::get_enum(get_func(version, "Key_F19")); details::check_error();
  Key_F2 = details::get_enum(get_func(version, "Key_F2")); details::check_error();
  Key_F20 = details::get_enum(get_func(version, "Key_F20")); details::check_error();
  Key_F21 = details::get_enum(get_func(version, "Key_F21")); details::check_error();
  Key_F22 = details::get_enum(get_func(version, "Key_F22")); details::check_error();
  Key_F23 = details::get_enum(get_func(version, "Key_F23")); details::check_error();
  Key_F24 = details::get_enum(get_func(version, "Key_F24")); details::check_error();
  Key_F3 = details::get_enum(get_func(version, "Key_F3")); details::check_error();
  Key_F4 = details::get_enum(get_func(version, "Key_F4")); details::check_error();
  Key_F5 = details::get_enum(get_func(version, "Key_F5")); details::check_error();
  Key_F6 = details::get_enum(get_func(version, "Key_F6")); details::check_error();
  Key_F7 = details::get_enum(get_func(version, "Key_F7")); details::check_error();
  Key_F8 = details::get_enum(get_func(version, "Key_F8")); details::check_error();
  Key_F9 = details::get_enum(get_func(version, "Key_F9")); details::check_error();
  Key_G = details::get_enum(get_func(version, "Key_G")); details::check_error();
  Key_GraveAccent = details::get_enum(get_func(version, "Key_GraveAccent")); details::check_error();
  Key_H = details::get_enum(get_func(version, "Key_H")); details::check_error();
  Key_Home = details::get_enum(get_func(version, "Key_Home")); details::check_error();
  Key_I = details::get_enum(get_func(version, "Key_I")); details::check_error();
  Key_Insert = details::get_enum(get_func(version, "Key_Insert")); details::check_error();
  Key_J = details::get_enum(get_func(version, "Key_J")); details::check_error();
  Key_K = details::get_enum(get_func(version, "Key_K")); details::check_error();
  Key_Keypad0 = details::get_enum(get_func(version, "Key_Keypad0")); details::check_error();
  Key_Keypad1 = details::get_enum(get_func(version, "Key_Keypad1")); details::check_error();
  Key_Keypad2 = details::get_enum(get_func(version, "Key_Keypad2")); details::check_error();
  Key_Keypad3 = details::get_enum(get_func(version, "Key_Keypad3")); details::check_error();
  Key_Keypad4 = details::get_enum(get_func(version, "Key_Keypad4")); details::check_error();
  Key_Keypad5 = details::get_enum(get_func(version, "Key_Keypad5")); details::check_error();
  Key_Keypad6 = details::get_enum(get_func(version, "Key_Keypad6")); details::check_error();
  Key_Keypad7 = details::get_enum(get_func(version, "Key_Keypad7")); details::check_error();
  Key_Keypad8 = details::get_enum(get_func(version, "Key_Keypad8")); details::check_error();
  Key_Keypad9 = details::get_enum(get_func(version, "Key_Keypad9")); details::check_error();
  Key_KeypadAdd = details::get_enum(get_func(version, "Key_KeypadAdd")); details::check_error();
  Key_KeypadDecimal = details::get_enum(get_func(version, "Key_KeypadDecimal")); details::check_error();
  Key_KeypadDivide = details::get_enum(get_func(version, "Key_KeypadDivide")); details::check_error();
  Key_KeypadEnter = details::get_enum(get_func(version, "Key_KeypadEnter")); details::check_error();
  Key_KeypadEqual = details::get_enum(get_func(version, "Key_KeypadEqual")); details::check_error();
  Key_KeypadMultiply = details::get_enum(get_func(version, "Key_KeypadMultiply")); details::check_error();
  Key_KeypadSubtract = details::get_enum(get_func(version, "Key_KeypadSubtract")); details::check_error();
  Key_L = details::get_enum(get_func(version, "Key_L")); details::check_error();
  Key_LeftAlt = details::get_enum(get_func(version, "Key_LeftAlt")); details::check_error();
  Key_LeftArrow = details::get_enum(get_func(version, "Key_LeftArrow")); details::check_error();
  Key_LeftBracket = details::get_enum(get_func(version, "Key_LeftBracket")); details::check_error();
  Key_LeftCtrl = details::get_enum(get_func(version, "Key_LeftCtrl")); details::check_error();
  Key_LeftShift = details::get_enum(get_func(version, "Key_LeftShift")); details::check_error();
  Key_LeftSuper = details::get_enum(get_func(version, "Key_LeftSuper")); details::check_error();
  Key_M = details::get_enum(get_func(version, "Key_M")); details::check_error();
  Key_Menu = details::get_enum(get_func(version, "Key_Menu")); details::check_error();
  Key_Minus = details::get_enum(get_func(version, "Key_Minus")); details::check_error();
  Key_N = details::get_enum(get_func(version, "Key_N")); details::check_error();
  Key_NumLock = details::get_enum(get_func(version, "Key_NumLock")); details::check_error();
  Key_O = details::get_enum(get_func(version, "Key_O")); details::check_error();
  Key_P = details::get_enum(get_func(version, "Key_P")); details::check_error();
  Key_PageDown = details::get_enum(get_func(version, "Key_PageDown")); details::check_error();
  Key_PageUp = details::get_enum(get_func(version, "Key_PageUp")); details::check_error();
  Key_Pause = details::get_enum(get_func(version, "Key_Pause")); details::check_error();
  Key_Period = details::get_enum(get_func(version, "Key_Period")); details::check_error();
  Key_PrintScreen = details::get_enum(get_func(version, "Key_PrintScreen")); details::check_error();
  Key_Q = details::get_enum(get_func(version, "Key_Q")); details::check_error();
  Key_R = details::get_enum(get_func(version, "Key_R")); details::check_error();
  Key_RightAlt = details::get_enum(get_func(version, "Key_RightAlt")); details::check_error();
  Key_RightArrow = details::get_enum(get_func(version, "Key_RightArrow")); details::check_error();
  Key_RightBracket = details::get_enum(get_func(version, "Key_RightBracket")); details::check_error();
  Key_RightCtrl = details::get_enum(get_func(version, "Key_RightCtrl")); details::check_error();
  Key_RightShift = details::get_enum(get_func(version, "Key_RightShift")); details::check_error();
  Key_RightSuper = details::get_enum(get_func(version, "Key_RightSuper")); details::check_error();
  Key_S = details::get_enum(get_func(version, "Key_S")); details::check_error();
  Key_ScrollLock = details::get_enum(get_func(version, "Key_ScrollLock")); details::check_error();
  Key_Semicolon = details::get_enum(get_func(version, "Key_Semicolon")); details::check_error();
  Key_Slash = details::get_enum(get_func(version, "Key_Slash")); details::check_error();
  Key_Space = details::get_enum(get_func(version, "Key_Space")); details::check_error();
  Key_T = details::get_enum(get_func(version, "Key_T")); details::check_error();
  Key_Tab = details::get_enum(get_func(version, "Key_Tab")); details::check_error();
  Key_U = details::get_enum(get_func(version, "Key_U")); details::check_error();
  Key_UpArrow = details::get_enum(get_func(version, "Key_UpArrow")); details::check_error();
  Key_V = details::get_enum(get_func(version, "Key_V")); details::check_error();
  Key_W = details::get_enum(get_func(version, "Key_W")); details::check_error();
  Key_X = details::get_enum(get_func(version, "Key_X")); details::check_error();
  Key_Y = details::get_enum(get_func(version, "Key_Y")); details::check_error();
  Key_Z = details::get_enum(get_func(version, "Key_Z")); details::check_error();
  Mod_Alt = details::get_enum(get_func(version, "Mod_Alt")); details::check_error();
  Mod_Ctrl = details::get_enum(get_func(version, "Mod_Ctrl")); details::check_error();
  Mod_None = details::get_enum(get_func(version, "Mod_None")); details::check_error();
  Mod_Shift = details::get_enum(get_func(version, "Mod_Shift")); details::check_error();
  Mod_Super = details::get_enum(get_func(version, "Mod_Super")); details::check_error();
  Key_MouseLeft = details::get_enum(get_func(version, "Key_MouseLeft")); details::check_error();
  Key_MouseMiddle = details::get_enum(get_func(version, "Key_MouseMiddle")); details::check_error();
  Key_MouseRight = details::get_enum(get_func(version, "Key_MouseRight")); details::check_error();
  Key_MouseWheelX = details::get_enum(get_func(version, "Key_MouseWheelX")); details::check_error();
  Key_MouseWheelY = details::get_enum(get_func(version, "Key_MouseWheelY")); details::check_error();
  Key_MouseX1 = details::get_enum(get_func(version, "Key_MouseX1")); details::check_error();
  Key_MouseX2 = details::get_enum(get_func(version, "Key_MouseX2")); details::check_error();
  GetMouseClickedCount = get_func(version, "GetMouseClickedCount"); details::check_error();
  GetMouseClickedPos = get_func(version, "GetMouseClickedPos"); details::check_error();
  GetMouseDelta = get_func(version, "GetMouseDelta"); details::check_error();
  GetMouseDownDuration = get_func(version, "GetMouseDownDuration"); details::check_error();
  GetMouseDragDelta = get_func(version, "GetMouseDragDelta"); details::check_error();
  GetMousePos = get_func(version, "GetMousePos"); details::check_error();
  GetMousePosOnOpeningCurrentPopup = get_func(version, "GetMousePosOnOpeningCurrentPopup"); details::check_error();
  GetMouseWheel = get_func(version, "GetMouseWheel"); details::check_error();
  IsAnyMouseDown = get_func(version, "IsAnyMouseDown"); details::check_error();
  IsMouseClicked = get_func(version, "IsMouseClicked"); details::check_error();
  IsMouseDoubleClicked = get_func(version, "IsMouseDoubleClicked"); details::check_error();
  IsMouseDown = get_func(version, "IsMouseDown"); details::check_error();
  IsMouseDragging = get_func(version, "IsMouseDragging"); details::check_error();
  IsMouseHoveringRect = get_func(version, "IsMouseHoveringRect"); details::check_error();
  IsMousePosValid = get_func(version, "IsMousePosValid"); details::check_error();
  IsMouseReleased = get_func(version, "IsMouseReleased"); details::check_error();
  MouseButton_Left = details::get_enum(get_func(version, "MouseButton_Left")); details::check_error();
  MouseButton_Middle = details::get_enum(get_func(version, "MouseButton_Middle")); details::check_error();
  MouseButton_Right = details::get_enum(get_func(version, "MouseButton_Right")); details::check_error();
  ResetMouseDragDelta = get_func(version, "ResetMouseDragDelta"); details::check_error();
  GetMouseCursor = get_func(version, "GetMouseCursor"); details::check_error();
  MouseCursor_Arrow = details::get_enum(get_func(version, "MouseCursor_Arrow")); details::check_error();
  MouseCursor_Hand = details::get_enum(get_func(version, "MouseCursor_Hand")); details::check_error();
  MouseCursor_None = details::get_enum(get_func(version, "MouseCursor_None")); details::check_error();
  MouseCursor_NotAllowed = details::get_enum(get_func(version, "MouseCursor_NotAllowed")); details::check_error();
  MouseCursor_ResizeAll = details::get_enum(get_func(version, "MouseCursor_ResizeAll")); details::check_error();
  MouseCursor_ResizeEW = details::get_enum(get_func(version, "MouseCursor_ResizeEW")); details::check_error();
  MouseCursor_ResizeNESW = details::get_enum(get_func(version, "MouseCursor_ResizeNESW")); details::check_error();
  MouseCursor_ResizeNS = details::get_enum(get_func(version, "MouseCursor_ResizeNS")); details::check_error();
  MouseCursor_ResizeNWSE = details::get_enum(get_func(version, "MouseCursor_ResizeNWSE")); details::check_error();
  MouseCursor_TextInput = details::get_enum(get_func(version, "MouseCursor_TextInput")); details::check_error();
  SetMouseCursor = get_func(version, "SetMouseCursor"); details::check_error();
  IsKeyChordPressed = get_func(version, "IsKeyChordPressed"); details::check_error();
  SetNextItemShortcut = get_func(version, "SetNextItemShortcut"); details::check_error();
  Shortcut = get_func(version, "Shortcut"); details::check_error();
  InputFlags_None = details::get_enum(get_func(version, "InputFlags_None")); details::check_error();
  InputFlags_Repeat = details::get_enum(get_func(version, "InputFlags_Repeat")); details::check_error();
  InputFlags_RouteFromRootWindow = details::get_enum(get_func(version, "InputFlags_RouteFromRootWindow")); details::check_error();
  InputFlags_RouteOverActive = details::get_enum(get_func(version, "InputFlags_RouteOverActive")); details::check_error();
  InputFlags_RouteOverFocused = details::get_enum(get_func(version, "InputFlags_RouteOverFocused")); details::check_error();
  InputFlags_RouteUnlessBgFocused = details::get_enum(get_func(version, "InputFlags_RouteUnlessBgFocused")); details::check_error();
  InputFlags_Tooltip = details::get_enum(get_func(version, "InputFlags_Tooltip")); details::check_error();
  InputFlags_RouteActive = details::get_enum(get_func(version, "InputFlags_RouteActive")); details::check_error();
  InputFlags_RouteAlways = details::get_enum(get_func(version, "InputFlags_RouteAlways")); details::check_error();
  InputFlags_RouteFocused = details::get_enum(get_func(version, "InputFlags_RouteFocused")); details::check_error();
  InputFlags_RouteGlobal = details::get_enum(get_func(version, "InputFlags_RouteGlobal")); details::check_error();
  BeginGroup = get_func(version, "BeginGroup"); details::check_error();
  Dummy = get_func(version, "Dummy"); details::check_error();
  EndGroup = get_func(version, "EndGroup"); details::check_error();
  Indent = get_func(version, "Indent"); details::check_error();
  NewLine = get_func(version, "NewLine"); details::check_error();
  SameLine = get_func(version, "SameLine"); details::check_error();
  Separator = get_func(version, "Separator"); details::check_error();
  SeparatorText = get_func(version, "SeparatorText"); details::check_error();
  Spacing = get_func(version, "Spacing"); details::check_error();
  Unindent = get_func(version, "Unindent"); details::check_error();
  IsRectVisible = get_func(version, "IsRectVisible"); details::check_error();
  IsRectVisibleEx = get_func(version, "IsRectVisibleEx"); details::check_error();
  PopClipRect = get_func(version, "PopClipRect"); details::check_error();
  PushClipRect = get_func(version, "PushClipRect"); details::check_error();
  GetCursorPos = get_func(version, "GetCursorPos"); details::check_error();
  GetCursorPosX = get_func(version, "GetCursorPosX"); details::check_error();
  GetCursorPosY = get_func(version, "GetCursorPosY"); details::check_error();
  GetCursorScreenPos = get_func(version, "GetCursorScreenPos"); details::check_error();
  GetCursorStartPos = get_func(version, "GetCursorStartPos"); details::check_error();
  SetCursorPos = get_func(version, "SetCursorPos"); details::check_error();
  SetCursorPosX = get_func(version, "SetCursorPosX"); details::check_error();
  SetCursorPosY = get_func(version, "SetCursorPosY"); details::check_error();
  SetCursorScreenPos = get_func(version, "SetCursorScreenPos"); details::check_error();
  CreateListClipper = get_func(version, "CreateListClipper"); details::check_error();
  ListClipper_Begin = get_func(version, "ListClipper_Begin"); details::check_error();
  ListClipper_End = get_func(version, "ListClipper_End"); details::check_error();
  ListClipper_GetDisplayRange = get_func(version, "ListClipper_GetDisplayRange"); details::check_error();
  ListClipper_IncludeItemByIndex = get_func(version, "ListClipper_IncludeItemByIndex"); details::check_error();
  ListClipper_IncludeItemsByIndex = get_func(version, "ListClipper_IncludeItemsByIndex"); details::check_error();
  ListClipper_Step = get_func(version, "ListClipper_Step"); details::check_error();
  BeginMenu = get_func(version, "BeginMenu"); details::check_error();
  BeginMenuBar = get_func(version, "BeginMenuBar"); details::check_error();
  EndMenu = get_func(version, "EndMenu"); details::check_error();
  EndMenuBar = get_func(version, "EndMenuBar"); details::check_error();
  MenuItem = get_func(version, "MenuItem"); details::check_error();
  PlotHistogram = get_func(version, "PlotHistogram"); details::check_error();
  PlotLines = get_func(version, "PlotLines"); details::check_error();
  BeginPopup = get_func(version, "BeginPopup"); details::check_error();
  BeginPopupModal = get_func(version, "BeginPopupModal"); details::check_error();
  CloseCurrentPopup = get_func(version, "CloseCurrentPopup"); details::check_error();
  EndPopup = get_func(version, "EndPopup"); details::check_error();
  IsPopupOpen = get_func(version, "IsPopupOpen"); details::check_error();
  OpenPopup = get_func(version, "OpenPopup"); details::check_error();
  OpenPopupOnItemClick = get_func(version, "OpenPopupOnItemClick"); details::check_error();
  PopupFlags_None = details::get_enum(get_func(version, "PopupFlags_None")); details::check_error();
  PopupFlags_MouseButtonLeft = details::get_enum(get_func(version, "PopupFlags_MouseButtonLeft")); details::check_error();
  PopupFlags_MouseButtonMiddle = details::get_enum(get_func(version, "PopupFlags_MouseButtonMiddle")); details::check_error();
  PopupFlags_MouseButtonRight = details::get_enum(get_func(version, "PopupFlags_MouseButtonRight")); details::check_error();
  PopupFlags_NoOpenOverItems = details::get_enum(get_func(version, "PopupFlags_NoOpenOverItems")); details::check_error();
  PopupFlags_AnyPopup = details::get_enum(get_func(version, "PopupFlags_AnyPopup")); details::check_error();
  PopupFlags_AnyPopupId = details::get_enum(get_func(version, "PopupFlags_AnyPopupId")); details::check_error();
  PopupFlags_AnyPopupLevel = details::get_enum(get_func(version, "PopupFlags_AnyPopupLevel")); details::check_error();
  PopupFlags_NoOpenOverExistingPopup = details::get_enum(get_func(version, "PopupFlags_NoOpenOverExistingPopup")); details::check_error();
  PopupFlags_NoReopen = details::get_enum(get_func(version, "PopupFlags_NoReopen")); details::check_error();
  BeginPopupContextItem = get_func(version, "BeginPopupContextItem"); details::check_error();
  BeginPopupContextWindow = get_func(version, "BeginPopupContextWindow"); details::check_error();
  BeginItemTooltip = get_func(version, "BeginItemTooltip"); details::check_error();
  BeginTooltip = get_func(version, "BeginTooltip"); details::check_error();
  EndTooltip = get_func(version, "EndTooltip"); details::check_error();
  SetItemTooltip = get_func(version, "SetItemTooltip"); details::check_error();
  SetTooltip = get_func(version, "SetTooltip"); details::check_error();
  Col_Border = details::get_enum(get_func(version, "Col_Border")); details::check_error();
  Col_BorderShadow = details::get_enum(get_func(version, "Col_BorderShadow")); details::check_error();
  Col_Button = details::get_enum(get_func(version, "Col_Button")); details::check_error();
  Col_ButtonActive = details::get_enum(get_func(version, "Col_ButtonActive")); details::check_error();
  Col_ButtonHovered = details::get_enum(get_func(version, "Col_ButtonHovered")); details::check_error();
  Col_CheckMark = details::get_enum(get_func(version, "Col_CheckMark")); details::check_error();
  Col_ChildBg = details::get_enum(get_func(version, "Col_ChildBg")); details::check_error();
  Col_DockingEmptyBg = details::get_enum(get_func(version, "Col_DockingEmptyBg")); details::check_error();
  Col_DockingPreview = details::get_enum(get_func(version, "Col_DockingPreview")); details::check_error();
  Col_DragDropTarget = details::get_enum(get_func(version, "Col_DragDropTarget")); details::check_error();
  Col_FrameBg = details::get_enum(get_func(version, "Col_FrameBg")); details::check_error();
  Col_FrameBgActive = details::get_enum(get_func(version, "Col_FrameBgActive")); details::check_error();
  Col_FrameBgHovered = details::get_enum(get_func(version, "Col_FrameBgHovered")); details::check_error();
  Col_Header = details::get_enum(get_func(version, "Col_Header")); details::check_error();
  Col_HeaderActive = details::get_enum(get_func(version, "Col_HeaderActive")); details::check_error();
  Col_HeaderHovered = details::get_enum(get_func(version, "Col_HeaderHovered")); details::check_error();
  Col_MenuBarBg = details::get_enum(get_func(version, "Col_MenuBarBg")); details::check_error();
  Col_ModalWindowDimBg = details::get_enum(get_func(version, "Col_ModalWindowDimBg")); details::check_error();
  Col_NavHighlight = details::get_enum(get_func(version, "Col_NavHighlight")); details::check_error();
  Col_NavWindowingDimBg = details::get_enum(get_func(version, "Col_NavWindowingDimBg")); details::check_error();
  Col_NavWindowingHighlight = details::get_enum(get_func(version, "Col_NavWindowingHighlight")); details::check_error();
  Col_PlotHistogram = details::get_enum(get_func(version, "Col_PlotHistogram")); details::check_error();
  Col_PlotHistogramHovered = details::get_enum(get_func(version, "Col_PlotHistogramHovered")); details::check_error();
  Col_PlotLines = details::get_enum(get_func(version, "Col_PlotLines")); details::check_error();
  Col_PlotLinesHovered = details::get_enum(get_func(version, "Col_PlotLinesHovered")); details::check_error();
  Col_PopupBg = details::get_enum(get_func(version, "Col_PopupBg")); details::check_error();
  Col_ResizeGrip = details::get_enum(get_func(version, "Col_ResizeGrip")); details::check_error();
  Col_ResizeGripActive = details::get_enum(get_func(version, "Col_ResizeGripActive")); details::check_error();
  Col_ResizeGripHovered = details::get_enum(get_func(version, "Col_ResizeGripHovered")); details::check_error();
  Col_ScrollbarBg = details::get_enum(get_func(version, "Col_ScrollbarBg")); details::check_error();
  Col_ScrollbarGrab = details::get_enum(get_func(version, "Col_ScrollbarGrab")); details::check_error();
  Col_ScrollbarGrabActive = details::get_enum(get_func(version, "Col_ScrollbarGrabActive")); details::check_error();
  Col_ScrollbarGrabHovered = details::get_enum(get_func(version, "Col_ScrollbarGrabHovered")); details::check_error();
  Col_Separator = details::get_enum(get_func(version, "Col_Separator")); details::check_error();
  Col_SeparatorActive = details::get_enum(get_func(version, "Col_SeparatorActive")); details::check_error();
  Col_SeparatorHovered = details::get_enum(get_func(version, "Col_SeparatorHovered")); details::check_error();
  Col_SliderGrab = details::get_enum(get_func(version, "Col_SliderGrab")); details::check_error();
  Col_SliderGrabActive = details::get_enum(get_func(version, "Col_SliderGrabActive")); details::check_error();
  Col_Tab = details::get_enum(get_func(version, "Col_Tab")); details::check_error();
  Col_TabDimmed = details::get_enum(get_func(version, "Col_TabDimmed")); details::check_error();
  Col_TabDimmedSelected = details::get_enum(get_func(version, "Col_TabDimmedSelected")); details::check_error();
  Col_TabDimmedSelectedOverline = details::get_enum(get_func(version, "Col_TabDimmedSelectedOverline")); details::check_error();
  Col_TabHovered = details::get_enum(get_func(version, "Col_TabHovered")); details::check_error();
  Col_TabSelected = details::get_enum(get_func(version, "Col_TabSelected")); details::check_error();
  Col_TabSelectedOverline = details::get_enum(get_func(version, "Col_TabSelectedOverline")); details::check_error();
  Col_TableBorderLight = details::get_enum(get_func(version, "Col_TableBorderLight")); details::check_error();
  Col_TableBorderStrong = details::get_enum(get_func(version, "Col_TableBorderStrong")); details::check_error();
  Col_TableHeaderBg = details::get_enum(get_func(version, "Col_TableHeaderBg")); details::check_error();
  Col_TableRowBg = details::get_enum(get_func(version, "Col_TableRowBg")); details::check_error();
  Col_TableRowBgAlt = details::get_enum(get_func(version, "Col_TableRowBgAlt")); details::check_error();
  Col_Text = details::get_enum(get_func(version, "Col_Text")); details::check_error();
  Col_TextDisabled = details::get_enum(get_func(version, "Col_TextDisabled")); details::check_error();
  Col_TextSelectedBg = details::get_enum(get_func(version, "Col_TextSelectedBg")); details::check_error();
  Col_TitleBg = details::get_enum(get_func(version, "Col_TitleBg")); details::check_error();
  Col_TitleBgActive = details::get_enum(get_func(version, "Col_TitleBgActive")); details::check_error();
  Col_TitleBgCollapsed = details::get_enum(get_func(version, "Col_TitleBgCollapsed")); details::check_error();
  Col_WindowBg = details::get_enum(get_func(version, "Col_WindowBg")); details::check_error();
  DebugFlashStyleColor = get_func(version, "DebugFlashStyleColor"); details::check_error();
  GetColor = get_func(version, "GetColor"); details::check_error();
  GetColorEx = get_func(version, "GetColorEx"); details::check_error();
  GetStyleColor = get_func(version, "GetStyleColor"); details::check_error();
  PopStyleColor = get_func(version, "PopStyleColor"); details::check_error();
  PushStyleColor = get_func(version, "PushStyleColor"); details::check_error();
  GetStyleVar = get_func(version, "GetStyleVar"); details::check_error();
  PopStyleVar = get_func(version, "PopStyleVar"); details::check_error();
  PushStyleVar = get_func(version, "PushStyleVar"); details::check_error();
  StyleVar_Alpha = details::get_enum(get_func(version, "StyleVar_Alpha")); details::check_error();
  StyleVar_ButtonTextAlign = details::get_enum(get_func(version, "StyleVar_ButtonTextAlign")); details::check_error();
  StyleVar_CellPadding = details::get_enum(get_func(version, "StyleVar_CellPadding")); details::check_error();
  StyleVar_ChildBorderSize = details::get_enum(get_func(version, "StyleVar_ChildBorderSize")); details::check_error();
  StyleVar_ChildRounding = details::get_enum(get_func(version, "StyleVar_ChildRounding")); details::check_error();
  StyleVar_DisabledAlpha = details::get_enum(get_func(version, "StyleVar_DisabledAlpha")); details::check_error();
  StyleVar_FrameBorderSize = details::get_enum(get_func(version, "StyleVar_FrameBorderSize")); details::check_error();
  StyleVar_FramePadding = details::get_enum(get_func(version, "StyleVar_FramePadding")); details::check_error();
  StyleVar_FrameRounding = details::get_enum(get_func(version, "StyleVar_FrameRounding")); details::check_error();
  StyleVar_GrabMinSize = details::get_enum(get_func(version, "StyleVar_GrabMinSize")); details::check_error();
  StyleVar_GrabRounding = details::get_enum(get_func(version, "StyleVar_GrabRounding")); details::check_error();
  StyleVar_IndentSpacing = details::get_enum(get_func(version, "StyleVar_IndentSpacing")); details::check_error();
  StyleVar_ItemInnerSpacing = details::get_enum(get_func(version, "StyleVar_ItemInnerSpacing")); details::check_error();
  StyleVar_ItemSpacing = details::get_enum(get_func(version, "StyleVar_ItemSpacing")); details::check_error();
  StyleVar_PopupBorderSize = details::get_enum(get_func(version, "StyleVar_PopupBorderSize")); details::check_error();
  StyleVar_PopupRounding = details::get_enum(get_func(version, "StyleVar_PopupRounding")); details::check_error();
  StyleVar_ScrollbarRounding = details::get_enum(get_func(version, "StyleVar_ScrollbarRounding")); details::check_error();
  StyleVar_ScrollbarSize = details::get_enum(get_func(version, "StyleVar_ScrollbarSize")); details::check_error();
  StyleVar_SelectableTextAlign = details::get_enum(get_func(version, "StyleVar_SelectableTextAlign")); details::check_error();
  StyleVar_SeparatorTextAlign = details::get_enum(get_func(version, "StyleVar_SeparatorTextAlign")); details::check_error();
  StyleVar_SeparatorTextBorderSize = details::get_enum(get_func(version, "StyleVar_SeparatorTextBorderSize")); details::check_error();
  StyleVar_SeparatorTextPadding = details::get_enum(get_func(version, "StyleVar_SeparatorTextPadding")); details::check_error();
  StyleVar_TabBarBorderSize = details::get_enum(get_func(version, "StyleVar_TabBarBorderSize")); details::check_error();
  StyleVar_TabBorderSize = details::get_enum(get_func(version, "StyleVar_TabBorderSize")); details::check_error();
  StyleVar_TabRounding = details::get_enum(get_func(version, "StyleVar_TabRounding")); details::check_error();
  StyleVar_TableAngledHeadersAngle = details::get_enum(get_func(version, "StyleVar_TableAngledHeadersAngle")); details::check_error();
  StyleVar_TableAngledHeadersTextAlign = details::get_enum(get_func(version, "StyleVar_TableAngledHeadersTextAlign")); details::check_error();
  StyleVar_WindowBorderSize = details::get_enum(get_func(version, "StyleVar_WindowBorderSize")); details::check_error();
  StyleVar_WindowMinSize = details::get_enum(get_func(version, "StyleVar_WindowMinSize")); details::check_error();
  StyleVar_WindowPadding = details::get_enum(get_func(version, "StyleVar_WindowPadding")); details::check_error();
  StyleVar_WindowRounding = details::get_enum(get_func(version, "StyleVar_WindowRounding")); details::check_error();
  StyleVar_WindowTitleAlign = details::get_enum(get_func(version, "StyleVar_WindowTitleAlign")); details::check_error();
  BeginTabBar = get_func(version, "BeginTabBar"); details::check_error();
  EndTabBar = get_func(version, "EndTabBar"); details::check_error();
  TabBarFlags_AutoSelectNewTabs = details::get_enum(get_func(version, "TabBarFlags_AutoSelectNewTabs")); details::check_error();
  TabBarFlags_DrawSelectedOverline = details::get_enum(get_func(version, "TabBarFlags_DrawSelectedOverline")); details::check_error();
  TabBarFlags_FittingPolicyResizeDown = details::get_enum(get_func(version, "TabBarFlags_FittingPolicyResizeDown")); details::check_error();
  TabBarFlags_FittingPolicyScroll = details::get_enum(get_func(version, "TabBarFlags_FittingPolicyScroll")); details::check_error();
  TabBarFlags_NoCloseWithMiddleMouseButton = details::get_enum(get_func(version, "TabBarFlags_NoCloseWithMiddleMouseButton")); details::check_error();
  TabBarFlags_NoTabListScrollingButtons = details::get_enum(get_func(version, "TabBarFlags_NoTabListScrollingButtons")); details::check_error();
  TabBarFlags_NoTooltip = details::get_enum(get_func(version, "TabBarFlags_NoTooltip")); details::check_error();
  TabBarFlags_None = details::get_enum(get_func(version, "TabBarFlags_None")); details::check_error();
  TabBarFlags_Reorderable = details::get_enum(get_func(version, "TabBarFlags_Reorderable")); details::check_error();
  TabBarFlags_TabListPopupButton = details::get_enum(get_func(version, "TabBarFlags_TabListPopupButton")); details::check_error();
  BeginTabItem = get_func(version, "BeginTabItem"); details::check_error();
  EndTabItem = get_func(version, "EndTabItem"); details::check_error();
  SetTabItemClosed = get_func(version, "SetTabItemClosed"); details::check_error();
  TabItemButton = get_func(version, "TabItemButton"); details::check_error();
  TabItemFlags_Leading = details::get_enum(get_func(version, "TabItemFlags_Leading")); details::check_error();
  TabItemFlags_NoAssumedClosure = details::get_enum(get_func(version, "TabItemFlags_NoAssumedClosure")); details::check_error();
  TabItemFlags_NoCloseWithMiddleMouseButton = details::get_enum(get_func(version, "TabItemFlags_NoCloseWithMiddleMouseButton")); details::check_error();
  TabItemFlags_NoPushId = details::get_enum(get_func(version, "TabItemFlags_NoPushId")); details::check_error();
  TabItemFlags_NoReorder = details::get_enum(get_func(version, "TabItemFlags_NoReorder")); details::check_error();
  TabItemFlags_NoTooltip = details::get_enum(get_func(version, "TabItemFlags_NoTooltip")); details::check_error();
  TabItemFlags_None = details::get_enum(get_func(version, "TabItemFlags_None")); details::check_error();
  TabItemFlags_SetSelected = details::get_enum(get_func(version, "TabItemFlags_SetSelected")); details::check_error();
  TabItemFlags_Trailing = details::get_enum(get_func(version, "TabItemFlags_Trailing")); details::check_error();
  TabItemFlags_UnsavedDocument = details::get_enum(get_func(version, "TabItemFlags_UnsavedDocument")); details::check_error();
  BeginTable = get_func(version, "BeginTable"); details::check_error();
  EndTable = get_func(version, "EndTable"); details::check_error();
  TableGetColumnCount = get_func(version, "TableGetColumnCount"); details::check_error();
  TableGetColumnIndex = get_func(version, "TableGetColumnIndex"); details::check_error();
  TableGetRowIndex = get_func(version, "TableGetRowIndex"); details::check_error();
  TableNextColumn = get_func(version, "TableNextColumn"); details::check_error();
  TableNextRow = get_func(version, "TableNextRow"); details::check_error();
  TableRowFlags_Headers = details::get_enum(get_func(version, "TableRowFlags_Headers")); details::check_error();
  TableRowFlags_None = details::get_enum(get_func(version, "TableRowFlags_None")); details::check_error();
  TableSetColumnIndex = get_func(version, "TableSetColumnIndex"); details::check_error();
  TableBgTarget_CellBg = details::get_enum(get_func(version, "TableBgTarget_CellBg")); details::check_error();
  TableBgTarget_None = details::get_enum(get_func(version, "TableBgTarget_None")); details::check_error();
  TableBgTarget_RowBg0 = details::get_enum(get_func(version, "TableBgTarget_RowBg0")); details::check_error();
  TableBgTarget_RowBg1 = details::get_enum(get_func(version, "TableBgTarget_RowBg1")); details::check_error();
  TableSetBgColor = get_func(version, "TableSetBgColor"); details::check_error();
  TableAngledHeadersRow = get_func(version, "TableAngledHeadersRow"); details::check_error();
  TableGetColumnFlags = get_func(version, "TableGetColumnFlags"); details::check_error();
  TableGetColumnName = get_func(version, "TableGetColumnName"); details::check_error();
  TableGetHoveredColumn = get_func(version, "TableGetHoveredColumn"); details::check_error();
  TableHeader = get_func(version, "TableHeader"); details::check_error();
  TableHeadersRow = get_func(version, "TableHeadersRow"); details::check_error();
  TableSetColumnEnabled = get_func(version, "TableSetColumnEnabled"); details::check_error();
  TableSetupColumn = get_func(version, "TableSetupColumn"); details::check_error();
  TableSetupScrollFreeze = get_func(version, "TableSetupScrollFreeze"); details::check_error();
  TableColumnFlags_None = details::get_enum(get_func(version, "TableColumnFlags_None")); details::check_error();
  TableColumnFlags_AngledHeader = details::get_enum(get_func(version, "TableColumnFlags_AngledHeader")); details::check_error();
  TableColumnFlags_DefaultHide = details::get_enum(get_func(version, "TableColumnFlags_DefaultHide")); details::check_error();
  TableColumnFlags_DefaultSort = details::get_enum(get_func(version, "TableColumnFlags_DefaultSort")); details::check_error();
  TableColumnFlags_Disabled = details::get_enum(get_func(version, "TableColumnFlags_Disabled")); details::check_error();
  TableColumnFlags_IndentDisable = details::get_enum(get_func(version, "TableColumnFlags_IndentDisable")); details::check_error();
  TableColumnFlags_IndentEnable = details::get_enum(get_func(version, "TableColumnFlags_IndentEnable")); details::check_error();
  TableColumnFlags_NoClip = details::get_enum(get_func(version, "TableColumnFlags_NoClip")); details::check_error();
  TableColumnFlags_NoHeaderLabel = details::get_enum(get_func(version, "TableColumnFlags_NoHeaderLabel")); details::check_error();
  TableColumnFlags_NoHeaderWidth = details::get_enum(get_func(version, "TableColumnFlags_NoHeaderWidth")); details::check_error();
  TableColumnFlags_NoHide = details::get_enum(get_func(version, "TableColumnFlags_NoHide")); details::check_error();
  TableColumnFlags_NoReorder = details::get_enum(get_func(version, "TableColumnFlags_NoReorder")); details::check_error();
  TableColumnFlags_NoResize = details::get_enum(get_func(version, "TableColumnFlags_NoResize")); details::check_error();
  TableColumnFlags_NoSort = details::get_enum(get_func(version, "TableColumnFlags_NoSort")); details::check_error();
  TableColumnFlags_NoSortAscending = details::get_enum(get_func(version, "TableColumnFlags_NoSortAscending")); details::check_error();
  TableColumnFlags_NoSortDescending = details::get_enum(get_func(version, "TableColumnFlags_NoSortDescending")); details::check_error();
  TableColumnFlags_PreferSortAscending = details::get_enum(get_func(version, "TableColumnFlags_PreferSortAscending")); details::check_error();
  TableColumnFlags_PreferSortDescending = details::get_enum(get_func(version, "TableColumnFlags_PreferSortDescending")); details::check_error();
  TableColumnFlags_WidthFixed = details::get_enum(get_func(version, "TableColumnFlags_WidthFixed")); details::check_error();
  TableColumnFlags_WidthStretch = details::get_enum(get_func(version, "TableColumnFlags_WidthStretch")); details::check_error();
  TableColumnFlags_IsEnabled = details::get_enum(get_func(version, "TableColumnFlags_IsEnabled")); details::check_error();
  TableColumnFlags_IsHovered = details::get_enum(get_func(version, "TableColumnFlags_IsHovered")); details::check_error();
  TableColumnFlags_IsSorted = details::get_enum(get_func(version, "TableColumnFlags_IsSorted")); details::check_error();
  TableColumnFlags_IsVisible = details::get_enum(get_func(version, "TableColumnFlags_IsVisible")); details::check_error();
  SortDirection_Ascending = details::get_enum(get_func(version, "SortDirection_Ascending")); details::check_error();
  SortDirection_Descending = details::get_enum(get_func(version, "SortDirection_Descending")); details::check_error();
  SortDirection_None = details::get_enum(get_func(version, "SortDirection_None")); details::check_error();
  TableGetColumnSortSpecs = get_func(version, "TableGetColumnSortSpecs"); details::check_error();
  TableNeedSort = get_func(version, "TableNeedSort"); details::check_error();
  TableFlags_None = details::get_enum(get_func(version, "TableFlags_None")); details::check_error();
  TableFlags_NoClip = details::get_enum(get_func(version, "TableFlags_NoClip")); details::check_error();
  TableFlags_Borders = details::get_enum(get_func(version, "TableFlags_Borders")); details::check_error();
  TableFlags_BordersH = details::get_enum(get_func(version, "TableFlags_BordersH")); details::check_error();
  TableFlags_BordersInner = details::get_enum(get_func(version, "TableFlags_BordersInner")); details::check_error();
  TableFlags_BordersInnerH = details::get_enum(get_func(version, "TableFlags_BordersInnerH")); details::check_error();
  TableFlags_BordersInnerV = details::get_enum(get_func(version, "TableFlags_BordersInnerV")); details::check_error();
  TableFlags_BordersOuter = details::get_enum(get_func(version, "TableFlags_BordersOuter")); details::check_error();
  TableFlags_BordersOuterH = details::get_enum(get_func(version, "TableFlags_BordersOuterH")); details::check_error();
  TableFlags_BordersOuterV = details::get_enum(get_func(version, "TableFlags_BordersOuterV")); details::check_error();
  TableFlags_BordersV = details::get_enum(get_func(version, "TableFlags_BordersV")); details::check_error();
  TableFlags_RowBg = details::get_enum(get_func(version, "TableFlags_RowBg")); details::check_error();
  TableFlags_ContextMenuInBody = details::get_enum(get_func(version, "TableFlags_ContextMenuInBody")); details::check_error();
  TableFlags_Hideable = details::get_enum(get_func(version, "TableFlags_Hideable")); details::check_error();
  TableFlags_NoSavedSettings = details::get_enum(get_func(version, "TableFlags_NoSavedSettings")); details::check_error();
  TableFlags_Reorderable = details::get_enum(get_func(version, "TableFlags_Reorderable")); details::check_error();
  TableFlags_Resizable = details::get_enum(get_func(version, "TableFlags_Resizable")); details::check_error();
  TableFlags_Sortable = details::get_enum(get_func(version, "TableFlags_Sortable")); details::check_error();
  TableFlags_HighlightHoveredColumn = details::get_enum(get_func(version, "TableFlags_HighlightHoveredColumn")); details::check_error();
  TableFlags_NoPadInnerX = details::get_enum(get_func(version, "TableFlags_NoPadInnerX")); details::check_error();
  TableFlags_NoPadOuterX = details::get_enum(get_func(version, "TableFlags_NoPadOuterX")); details::check_error();
  TableFlags_PadOuterX = details::get_enum(get_func(version, "TableFlags_PadOuterX")); details::check_error();
  TableFlags_ScrollX = details::get_enum(get_func(version, "TableFlags_ScrollX")); details::check_error();
  TableFlags_ScrollY = details::get_enum(get_func(version, "TableFlags_ScrollY")); details::check_error();
  TableFlags_NoHostExtendX = details::get_enum(get_func(version, "TableFlags_NoHostExtendX")); details::check_error();
  TableFlags_NoHostExtendY = details::get_enum(get_func(version, "TableFlags_NoHostExtendY")); details::check_error();
  TableFlags_NoKeepColumnsVisible = details::get_enum(get_func(version, "TableFlags_NoKeepColumnsVisible")); details::check_error();
  TableFlags_PreciseWidths = details::get_enum(get_func(version, "TableFlags_PreciseWidths")); details::check_error();
  TableFlags_SizingFixedFit = details::get_enum(get_func(version, "TableFlags_SizingFixedFit")); details::check_error();
  TableFlags_SizingFixedSame = details::get_enum(get_func(version, "TableFlags_SizingFixedSame")); details::check_error();
  TableFlags_SizingStretchProp = details::get_enum(get_func(version, "TableFlags_SizingStretchProp")); details::check_error();
  TableFlags_SizingStretchSame = details::get_enum(get_func(version, "TableFlags_SizingStretchSame")); details::check_error();
  TableFlags_SortMulti = details::get_enum(get_func(version, "TableFlags_SortMulti")); details::check_error();
  TableFlags_SortTristate = details::get_enum(get_func(version, "TableFlags_SortTristate")); details::check_error();
  AlignTextToFramePadding = get_func(version, "AlignTextToFramePadding"); details::check_error();
  Bullet = get_func(version, "Bullet"); details::check_error();
  BulletText = get_func(version, "BulletText"); details::check_error();
  CalcTextSize = get_func(version, "CalcTextSize"); details::check_error();
  DebugTextEncoding = get_func(version, "DebugTextEncoding"); details::check_error();
  GetFrameHeight = get_func(version, "GetFrameHeight"); details::check_error();
  GetFrameHeightWithSpacing = get_func(version, "GetFrameHeightWithSpacing"); details::check_error();
  GetTextLineHeight = get_func(version, "GetTextLineHeight"); details::check_error();
  GetTextLineHeightWithSpacing = get_func(version, "GetTextLineHeightWithSpacing"); details::check_error();
  LabelText = get_func(version, "LabelText"); details::check_error();
  PopTextWrapPos = get_func(version, "PopTextWrapPos"); details::check_error();
  PushTextWrapPos = get_func(version, "PushTextWrapPos"); details::check_error();
  Text = get_func(version, "Text"); details::check_error();
  TextColored = get_func(version, "TextColored"); details::check_error();
  TextDisabled = get_func(version, "TextDisabled"); details::check_error();
  TextWrapped = get_func(version, "TextWrapped"); details::check_error();
  InputDouble = get_func(version, "InputDouble"); details::check_error();
  InputDouble2 = get_func(version, "InputDouble2"); details::check_error();
  InputDouble3 = get_func(version, "InputDouble3"); details::check_error();
  InputDouble4 = get_func(version, "InputDouble4"); details::check_error();
  InputDoubleN = get_func(version, "InputDoubleN"); details::check_error();
  InputInt = get_func(version, "InputInt"); details::check_error();
  InputInt2 = get_func(version, "InputInt2"); details::check_error();
  InputInt3 = get_func(version, "InputInt3"); details::check_error();
  InputInt4 = get_func(version, "InputInt4"); details::check_error();
  InputText = get_func(version, "InputText"); details::check_error();
  InputTextMultiline = get_func(version, "InputTextMultiline"); details::check_error();
  InputTextWithHint = get_func(version, "InputTextWithHint"); details::check_error();
  InputTextFlags_None = details::get_enum(get_func(version, "InputTextFlags_None")); details::check_error();
  InputTextFlags_CharsDecimal = details::get_enum(get_func(version, "InputTextFlags_CharsDecimal")); details::check_error();
  InputTextFlags_CharsHexadecimal = details::get_enum(get_func(version, "InputTextFlags_CharsHexadecimal")); details::check_error();
  InputTextFlags_CharsNoBlank = details::get_enum(get_func(version, "InputTextFlags_CharsNoBlank")); details::check_error();
  InputTextFlags_CharsScientific = details::get_enum(get_func(version, "InputTextFlags_CharsScientific")); details::check_error();
  InputTextFlags_CharsUppercase = details::get_enum(get_func(version, "InputTextFlags_CharsUppercase")); details::check_error();
  InputTextFlags_CallbackAlways = details::get_enum(get_func(version, "InputTextFlags_CallbackAlways")); details::check_error();
  InputTextFlags_CallbackCharFilter = details::get_enum(get_func(version, "InputTextFlags_CallbackCharFilter")); details::check_error();
  InputTextFlags_CallbackCompletion = details::get_enum(get_func(version, "InputTextFlags_CallbackCompletion")); details::check_error();
  InputTextFlags_CallbackEdit = details::get_enum(get_func(version, "InputTextFlags_CallbackEdit")); details::check_error();
  InputTextFlags_CallbackHistory = details::get_enum(get_func(version, "InputTextFlags_CallbackHistory")); details::check_error();
  InputTextFlags_AllowTabInput = details::get_enum(get_func(version, "InputTextFlags_AllowTabInput")); details::check_error();
  InputTextFlags_CtrlEnterForNewLine = details::get_enum(get_func(version, "InputTextFlags_CtrlEnterForNewLine")); details::check_error();
  InputTextFlags_EnterReturnsTrue = details::get_enum(get_func(version, "InputTextFlags_EnterReturnsTrue")); details::check_error();
  InputTextFlags_EscapeClearsAll = details::get_enum(get_func(version, "InputTextFlags_EscapeClearsAll")); details::check_error();
  InputTextFlags_AlwaysOverwrite = details::get_enum(get_func(version, "InputTextFlags_AlwaysOverwrite")); details::check_error();
  InputTextFlags_AutoSelectAll = details::get_enum(get_func(version, "InputTextFlags_AutoSelectAll")); details::check_error();
  InputTextFlags_DisplayEmptyRefVal = details::get_enum(get_func(version, "InputTextFlags_DisplayEmptyRefVal")); details::check_error();
  InputTextFlags_NoHorizontalScroll = details::get_enum(get_func(version, "InputTextFlags_NoHorizontalScroll")); details::check_error();
  InputTextFlags_NoUndoRedo = details::get_enum(get_func(version, "InputTextFlags_NoUndoRedo")); details::check_error();
  InputTextFlags_ParseEmptyRefVal = details::get_enum(get_func(version, "InputTextFlags_ParseEmptyRefVal")); details::check_error();
  InputTextFlags_Password = details::get_enum(get_func(version, "InputTextFlags_Password")); details::check_error();
  InputTextFlags_ReadOnly = details::get_enum(get_func(version, "InputTextFlags_ReadOnly")); details::check_error();
  CreateTextFilter = get_func(version, "CreateTextFilter"); details::check_error();
  TextFilter_Clear = get_func(version, "TextFilter_Clear"); details::check_error();
  TextFilter_Draw = get_func(version, "TextFilter_Draw"); details::check_error();
  TextFilter_Get = get_func(version, "TextFilter_Get"); details::check_error();
  TextFilter_IsActive = get_func(version, "TextFilter_IsActive"); details::check_error();
  TextFilter_PassFilter = get_func(version, "TextFilter_PassFilter"); details::check_error();
  TextFilter_Set = get_func(version, "TextFilter_Set"); details::check_error();
  CollapsingHeader = get_func(version, "CollapsingHeader"); details::check_error();
  GetTreeNodeToLabelSpacing = get_func(version, "GetTreeNodeToLabelSpacing"); details::check_error();
  IsItemToggledOpen = get_func(version, "IsItemToggledOpen"); details::check_error();
  SetNextItemOpen = get_func(version, "SetNextItemOpen"); details::check_error();
  TreeNode = get_func(version, "TreeNode"); details::check_error();
  TreeNodeEx = get_func(version, "TreeNodeEx"); details::check_error();
  TreePop = get_func(version, "TreePop"); details::check_error();
  TreePush = get_func(version, "TreePush"); details::check_error();
  TreeNodeFlags_AllowOverlap = details::get_enum(get_func(version, "TreeNodeFlags_AllowOverlap")); details::check_error();
  TreeNodeFlags_Bullet = details::get_enum(get_func(version, "TreeNodeFlags_Bullet")); details::check_error();
  TreeNodeFlags_CollapsingHeader = details::get_enum(get_func(version, "TreeNodeFlags_CollapsingHeader")); details::check_error();
  TreeNodeFlags_DefaultOpen = details::get_enum(get_func(version, "TreeNodeFlags_DefaultOpen")); details::check_error();
  TreeNodeFlags_FramePadding = details::get_enum(get_func(version, "TreeNodeFlags_FramePadding")); details::check_error();
  TreeNodeFlags_Framed = details::get_enum(get_func(version, "TreeNodeFlags_Framed")); details::check_error();
  TreeNodeFlags_Leaf = details::get_enum(get_func(version, "TreeNodeFlags_Leaf")); details::check_error();
  TreeNodeFlags_NoAutoOpenOnLog = details::get_enum(get_func(version, "TreeNodeFlags_NoAutoOpenOnLog")); details::check_error();
  TreeNodeFlags_NoTreePushOnOpen = details::get_enum(get_func(version, "TreeNodeFlags_NoTreePushOnOpen")); details::check_error();
  TreeNodeFlags_None = details::get_enum(get_func(version, "TreeNodeFlags_None")); details::check_error();
  TreeNodeFlags_OpenOnArrow = details::get_enum(get_func(version, "TreeNodeFlags_OpenOnArrow")); details::check_error();
  TreeNodeFlags_OpenOnDoubleClick = details::get_enum(get_func(version, "TreeNodeFlags_OpenOnDoubleClick")); details::check_error();
  TreeNodeFlags_Selected = details::get_enum(get_func(version, "TreeNodeFlags_Selected")); details::check_error();
  TreeNodeFlags_SpanAllColumns = details::get_enum(get_func(version, "TreeNodeFlags_SpanAllColumns")); details::check_error();
  TreeNodeFlags_SpanAvailWidth = details::get_enum(get_func(version, "TreeNodeFlags_SpanAvailWidth")); details::check_error();
  TreeNodeFlags_SpanFullWidth = details::get_enum(get_func(version, "TreeNodeFlags_SpanFullWidth")); details::check_error();
  TreeNodeFlags_SpanTextWidth = details::get_enum(get_func(version, "TreeNodeFlags_SpanTextWidth")); details::check_error();
  GetBuiltinPath = get_func(version, "GetBuiltinPath"); details::check_error();
  GetVersion = get_func(version, "GetVersion"); details::check_error();
  NumericLimits_Double = get_func(version, "NumericLimits_Double"); details::check_error();
  NumericLimits_Float = get_func(version, "NumericLimits_Float"); details::check_error();
  NumericLimits_Int = get_func(version, "NumericLimits_Int"); details::check_error();
  PointConvertNative = get_func(version, "PointConvertNative"); details::check_error();
  ProgressBar = get_func(version, "ProgressBar"); details::check_error();
  ValidatePtr = get_func(version, "ValidatePtr"); details::check_error();
  GetClipboardText = get_func(version, "GetClipboardText"); details::check_error();
  SetClipboardText = get_func(version, "SetClipboardText"); details::check_error();
  ColorConvertDouble4ToU32 = get_func(version, "ColorConvertDouble4ToU32"); details::check_error();
  ColorConvertHSVtoRGB = get_func(version, "ColorConvertHSVtoRGB"); details::check_error();
  ColorConvertNative = get_func(version, "ColorConvertNative"); details::check_error();
  ColorConvertRGBtoHSV = get_func(version, "ColorConvertRGBtoHSV"); details::check_error();
  ColorConvertU32ToDouble4 = get_func(version, "ColorConvertU32ToDouble4"); details::check_error();
  Cond_Always = details::get_enum(get_func(version, "Cond_Always")); details::check_error();
  Cond_Appearing = details::get_enum(get_func(version, "Cond_Appearing")); details::check_error();
  Cond_FirstUseEver = details::get_enum(get_func(version, "Cond_FirstUseEver")); details::check_error();
  Cond_Once = details::get_enum(get_func(version, "Cond_Once")); details::check_error();
  PopID = get_func(version, "PopID"); details::check_error();
  PushID = get_func(version, "PushID"); details::check_error();
  LogFinish = get_func(version, "LogFinish"); details::check_error();
  LogText = get_func(version, "LogText"); details::check_error();
  LogToClipboard = get_func(version, "LogToClipboard"); details::check_error();
  LogToFile = get_func(version, "LogToFile"); details::check_error();
  LogToTTY = get_func(version, "LogToTTY"); details::check_error();
  GetMainViewport = get_func(version, "GetMainViewport"); details::check_error();
  GetWindowViewport = get_func(version, "GetWindowViewport"); details::check_error();
  Viewport_GetCenter = get_func(version, "Viewport_GetCenter"); details::check_error();
  Viewport_GetPos = get_func(version, "Viewport_GetPos"); details::check_error();
  Viewport_GetSize = get_func(version, "Viewport_GetSize"); details::check_error();
  Viewport_GetWorkCenter = get_func(version, "Viewport_GetWorkCenter"); details::check_error();
  Viewport_GetWorkPos = get_func(version, "Viewport_GetWorkPos"); details::check_error();
  Viewport_GetWorkSize = get_func(version, "Viewport_GetWorkSize"); details::check_error();
  Begin = get_func(version, "Begin"); details::check_error();
  End = get_func(version, "End"); details::check_error();
  BeginChild = get_func(version, "BeginChild"); details::check_error();
  EndChild = get_func(version, "EndChild"); details::check_error();
  ChildFlags_AlwaysAutoResize = details::get_enum(get_func(version, "ChildFlags_AlwaysAutoResize")); details::check_error();
  ChildFlags_AlwaysUseWindowPadding = details::get_enum(get_func(version, "ChildFlags_AlwaysUseWindowPadding")); details::check_error();
  ChildFlags_AutoResizeX = details::get_enum(get_func(version, "ChildFlags_AutoResizeX")); details::check_error();
  ChildFlags_AutoResizeY = details::get_enum(get_func(version, "ChildFlags_AutoResizeY")); details::check_error();
  ChildFlags_Border = details::get_enum(get_func(version, "ChildFlags_Border")); details::check_error();
  ChildFlags_FrameStyle = details::get_enum(get_func(version, "ChildFlags_FrameStyle")); details::check_error();
  ChildFlags_NavFlattened = details::get_enum(get_func(version, "ChildFlags_NavFlattened")); details::check_error();
  ChildFlags_None = details::get_enum(get_func(version, "ChildFlags_None")); details::check_error();
  ChildFlags_ResizeX = details::get_enum(get_func(version, "ChildFlags_ResizeX")); details::check_error();
  ChildFlags_ResizeY = details::get_enum(get_func(version, "ChildFlags_ResizeY")); details::check_error();
  GetContentRegionAvail = get_func(version, "GetContentRegionAvail"); details::check_error();
  GetContentRegionMax = get_func(version, "GetContentRegionMax"); details::check_error();
  GetWindowContentRegionMax = get_func(version, "GetWindowContentRegionMax"); details::check_error();
  GetWindowContentRegionMin = get_func(version, "GetWindowContentRegionMin"); details::check_error();
  ShowAboutWindow = get_func(version, "ShowAboutWindow"); details::check_error();
  ShowDebugLogWindow = get_func(version, "ShowDebugLogWindow"); details::check_error();
  ShowIDStackToolWindow = get_func(version, "ShowIDStackToolWindow"); details::check_error();
  ShowMetricsWindow = get_func(version, "ShowMetricsWindow"); details::check_error();
  GetWindowDockID = get_func(version, "GetWindowDockID"); details::check_error();
  IsWindowDocked = get_func(version, "IsWindowDocked"); details::check_error();
  SetNextWindowDockID = get_func(version, "SetNextWindowDockID"); details::check_error();
  WindowFlags_AlwaysAutoResize = details::get_enum(get_func(version, "WindowFlags_AlwaysAutoResize")); details::check_error();
  WindowFlags_AlwaysHorizontalScrollbar = details::get_enum(get_func(version, "WindowFlags_AlwaysHorizontalScrollbar")); details::check_error();
  WindowFlags_AlwaysVerticalScrollbar = details::get_enum(get_func(version, "WindowFlags_AlwaysVerticalScrollbar")); details::check_error();
  WindowFlags_HorizontalScrollbar = details::get_enum(get_func(version, "WindowFlags_HorizontalScrollbar")); details::check_error();
  WindowFlags_MenuBar = details::get_enum(get_func(version, "WindowFlags_MenuBar")); details::check_error();
  WindowFlags_NoBackground = details::get_enum(get_func(version, "WindowFlags_NoBackground")); details::check_error();
  WindowFlags_NoCollapse = details::get_enum(get_func(version, "WindowFlags_NoCollapse")); details::check_error();
  WindowFlags_NoDecoration = details::get_enum(get_func(version, "WindowFlags_NoDecoration")); details::check_error();
  WindowFlags_NoDocking = details::get_enum(get_func(version, "WindowFlags_NoDocking")); details::check_error();
  WindowFlags_NoFocusOnAppearing = details::get_enum(get_func(version, "WindowFlags_NoFocusOnAppearing")); details::check_error();
  WindowFlags_NoInputs = details::get_enum(get_func(version, "WindowFlags_NoInputs")); details::check_error();
  WindowFlags_NoMouseInputs = details::get_enum(get_func(version, "WindowFlags_NoMouseInputs")); details::check_error();
  WindowFlags_NoMove = details::get_enum(get_func(version, "WindowFlags_NoMove")); details::check_error();
  WindowFlags_NoNav = details::get_enum(get_func(version, "WindowFlags_NoNav")); details::check_error();
  WindowFlags_NoNavFocus = details::get_enum(get_func(version, "WindowFlags_NoNavFocus")); details::check_error();
  WindowFlags_NoNavInputs = details::get_enum(get_func(version, "WindowFlags_NoNavInputs")); details::check_error();
  WindowFlags_NoResize = details::get_enum(get_func(version, "WindowFlags_NoResize")); details::check_error();
  WindowFlags_NoSavedSettings = details::get_enum(get_func(version, "WindowFlags_NoSavedSettings")); details::check_error();
  WindowFlags_NoScrollWithMouse = details::get_enum(get_func(version, "WindowFlags_NoScrollWithMouse")); details::check_error();
  WindowFlags_NoScrollbar = details::get_enum(get_func(version, "WindowFlags_NoScrollbar")); details::check_error();
  WindowFlags_NoTitleBar = details::get_enum(get_func(version, "WindowFlags_NoTitleBar")); details::check_error();
  WindowFlags_None = details::get_enum(get_func(version, "WindowFlags_None")); details::check_error();
  WindowFlags_TopMost = details::get_enum(get_func(version, "WindowFlags_TopMost")); details::check_error();
  WindowFlags_UnsavedDocument = details::get_enum(get_func(version, "WindowFlags_UnsavedDocument")); details::check_error();
  GetWindowDpiScale = get_func(version, "GetWindowDpiScale"); details::check_error();
  GetWindowHeight = get_func(version, "GetWindowHeight"); details::check_error();
  GetWindowPos = get_func(version, "GetWindowPos"); details::check_error();
  GetWindowSize = get_func(version, "GetWindowSize"); details::check_error();
  GetWindowWidth = get_func(version, "GetWindowWidth"); details::check_error();
  IsWindowAppearing = get_func(version, "IsWindowAppearing"); details::check_error();
  IsWindowFocused = get_func(version, "IsWindowFocused"); details::check_error();
  IsWindowHovered = get_func(version, "IsWindowHovered"); details::check_error();
  SetNextWindowBgAlpha = get_func(version, "SetNextWindowBgAlpha"); details::check_error();
  SetNextWindowCollapsed = get_func(version, "SetNextWindowCollapsed"); details::check_error();
  SetNextWindowContentSize = get_func(version, "SetNextWindowContentSize"); details::check_error();
  SetNextWindowFocus = get_func(version, "SetNextWindowFocus"); details::check_error();
  SetNextWindowPos = get_func(version, "SetNextWindowPos"); details::check_error();
  SetNextWindowScroll = get_func(version, "SetNextWindowScroll"); details::check_error();
  SetNextWindowSize = get_func(version, "SetNextWindowSize"); details::check_error();
  SetNextWindowSizeConstraints = get_func(version, "SetNextWindowSizeConstraints"); details::check_error();
  SetWindowCollapsed = get_func(version, "SetWindowCollapsed"); details::check_error();
  SetWindowCollapsedEx = get_func(version, "SetWindowCollapsedEx"); details::check_error();
  SetWindowFocus = get_func(version, "SetWindowFocus"); details::check_error();
  SetWindowFocusEx = get_func(version, "SetWindowFocusEx"); details::check_error();
  SetWindowPos = get_func(version, "SetWindowPos"); details::check_error();
  SetWindowPosEx = get_func(version, "SetWindowPosEx"); details::check_error();
  SetWindowSize = get_func(version, "SetWindowSize"); details::check_error();
  SetWindowSizeEx = get_func(version, "SetWindowSizeEx"); details::check_error();
  FocusedFlags_AnyWindow = details::get_enum(get_func(version, "FocusedFlags_AnyWindow")); details::check_error();
  FocusedFlags_ChildWindows = details::get_enum(get_func(version, "FocusedFlags_ChildWindows")); details::check_error();
  FocusedFlags_DockHierarchy = details::get_enum(get_func(version, "FocusedFlags_DockHierarchy")); details::check_error();
  FocusedFlags_NoPopupHierarchy = details::get_enum(get_func(version, "FocusedFlags_NoPopupHierarchy")); details::check_error();
  FocusedFlags_None = details::get_enum(get_func(version, "FocusedFlags_None")); details::check_error();
  FocusedFlags_RootAndChildWindows = details::get_enum(get_func(version, "FocusedFlags_RootAndChildWindows")); details::check_error();
  FocusedFlags_RootWindow = details::get_enum(get_func(version, "FocusedFlags_RootWindow")); details::check_error();
  GetScrollMaxX = get_func(version, "GetScrollMaxX"); details::check_error();
  GetScrollMaxY = get_func(version, "GetScrollMaxY"); details::check_error();
  GetScrollX = get_func(version, "GetScrollX"); details::check_error();
  GetScrollY = get_func(version, "GetScrollY"); details::check_error();
  SetScrollFromPosX = get_func(version, "SetScrollFromPosX"); details::check_error();
  SetScrollFromPosY = get_func(version, "SetScrollFromPosY"); details::check_error();
  SetScrollHereX = get_func(version, "SetScrollHereX"); details::check_error();
  SetScrollHereY = get_func(version, "SetScrollHereY"); details::check_error();
  SetScrollX = get_func(version, "SetScrollX"); details::check_error();
  SetScrollY = get_func(version, "SetScrollY"); details::check_error();
}
#endif

#endif
